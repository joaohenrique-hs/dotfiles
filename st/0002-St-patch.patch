From 46e02c565af54c5bca212f7308a58b282f8ca285 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jo=C3=A3o=20Henrique?= <joaohenrique.hs@hotmail.com>
Date: Tue, 9 Jun 2020 18:13:10 -0300
Subject: [PATCH] Patch

---
 Makefile                 |    5 +-
 config.def.h => config.h |   73 +-
 config.mk                |    6 +-
 hb.c                     |  136 ++
 hb.h                     |    7 +
 hb.o                     |  Bin 0 -> 4576 bytes
 st                       |  Bin 0 -> 103528 bytes
 st.c                     |  126 +-
 st.c.orig                | 2685 ++++++++++++++++++++++++++++++++++++++
 st.h                     |    6 +-
 st.o                     |  Bin 0 -> 76968 bytes
 win.h                    |    2 +-
 x.c                      |   16 +-
 x.o                      |  Bin 0 -> 74016 bytes
 14 files changed, 2995 insertions(+), 67 deletions(-)
 rename config.def.h => config.h (92%)
 create mode 100644 hb.c
 create mode 100644 hb.h
 create mode 100644 hb.o
 create mode 100755 st
 create mode 100644 st.c.orig
 create mode 100644 st.o
 create mode 100644 x.o

diff --git a/Makefile b/Makefile
index 470ac86..38240da 100644
--- a/Makefile
+++ b/Makefile
@@ -4,7 +4,7 @@
 
 include config.mk
 
-SRC = st.c x.c
+SRC = st.c x.c hb.c
 OBJ = $(SRC:.c=.o)
 
 all: options st
@@ -22,7 +22,8 @@ config.h:
 	$(CC) $(STCFLAGS) -c $<
 
 st.o: config.h st.h win.h
-x.o: arg.h config.h st.h win.h
+x.o: arg.h config.h st.h win.h hb.h
+hb.o: st.h
 
 $(OBJ): config.h config.mk
 
diff --git a/config.def.h b/config.h
similarity index 92%
rename from config.def.h
rename to config.h
index 6f05dce..e94d814 100644
--- a/config.def.h
+++ b/config.h
@@ -5,7 +5,7 @@
  *
  * font: see http://freedesktop.org/software/fontconfig/fontconfig-user.html
  */
-static char *font = "Liberation Mono:pixelsize=12:antialias=true:autohint=true";
+static char *font = "FiraCode Nerd Font Mono:pixelsize=16:antialias=true:autohint=true";
 static int borderpx = 2;
 
 /*
@@ -95,43 +95,48 @@ unsigned int tabspaces = 8;
 
 /* Terminal colors (16 first used in escape sequence) */
 static const char *colorname[] = {
-	/* 8 normal colors */
-	"black",
-	"red3",
-	"green3",
-	"yellow3",
-	"blue2",
-	"magenta3",
-	"cyan3",
-	"gray90",
-
-	/* 8 bright colors */
-	"gray50",
-	"red",
-	"green",
-	"yellow",
-	"#5c5cff",
-	"magenta",
-	"cyan",
-	"white",
-
-	[255] = 0,
-
-	/* more colors can be added after 255 to use with DefaultXX */
-	"#cccccc",
-	"#555555",
-};
 
+  /* 8 normal colors */
+  [0] = "#000000", /* black   */
+  [1] = "#ff5555", /* red     */
+  [2] = "#50fa7b", /* green   */
+  [3] = "#f1fa8c", /* yellow  */
+  [4] = "#bd93f9", /* blue    */
+  [5] = "#ff79c6", /* magenta */
+  [6] = "#8be9fd", /* cyan    */
+  [7] = "#bbbbbb", /* white   */
+
+  /* 8 bright colors */
+  [8]  = "#44475a", /* black   */
+  [9]  = "#ff5555", /* red     */
+  [10] = "#50fa7b", /* green   */
+  [11] = "#f1fa8c", /* yellow  */
+  [12] = "#bd93f9", /* blue    */
+  [13] = "#ff79c6", /* magenta */
+  [14] = "#8be9fd", /* cyan    */
+  [15] = "#ffffff", /* white   */
+
+  /* special colors */
+  [256] = "#282a36", /* background */
+  [257] = "#f8f8f2", /* foreground */
+};
 
 /*
  * Default colors (colorname index)
- * foreground, background, cursor, reverse cursor
+ * foreground, background, cursor
  */
-unsigned int defaultfg = 7;
-unsigned int defaultbg = 0;
-static unsigned int defaultcs = 256;
+unsigned int defaultfg = 257;
+unsigned int defaultbg = 256;
+static unsigned int defaultcs = 257;
 static unsigned int defaultrcs = 257;
 
+/*
+ * Colors used, when the specific fg == defaultfg. So in reverse mode this
+ * will reverse too. Another logic would only make the simple feature too
+ * complex.
+ */
+unsigned int defaultitalic = 7;
+unsigned int defaultunderline = 7;
 /*
  * Default shape of cursor
  * 2: Block ("█")
@@ -199,6 +204,12 @@ static Shortcut shortcuts[] = {
 	{ TERMMOD,              XK_Y,           selpaste,       {.i =  0} },
 	{ ShiftMask,            XK_Insert,      selpaste,       {.i =  0} },
 	{ TERMMOD,              XK_Num_Lock,    numlock,        {.i =  0} },
+	{ ShiftMask,            XK_Page_Up,     kscrollup,      {.i = -1} },
+	{ ShiftMask,            XK_Page_Down,   kscrolldown,    {.i = -1} },
+  { MODKEY,               XK_k,           kscrollup,      {.i =  1} },
+  { MODKEY,               XK_j,           kscrolldown,    {.i =  1} },
+  { MODKEY,               XK_u,           kscrollup,      {.i = -1} },
+  { MODKEY,               XK_d,           kscrolldown,    {.i = -1} },
 };
 
 /*
diff --git a/config.mk b/config.mk
index beafc35..3df5c83 100644
--- a/config.mk
+++ b/config.mk
@@ -15,10 +15,12 @@ PKG_CONFIG = pkg-config
 # includes and libs
 INCS = -I$(X11INC) \
        `$(PKG_CONFIG) --cflags fontconfig` \
-       `$(PKG_CONFIG) --cflags freetype2`
+       `$(PKG_CONFIG) --cflags freetype2` \
+       `$(PKG_CONFIG) --cflags harfbuzz`
 LIBS = -L$(X11LIB) -lm -lrt -lX11 -lutil -lXft \
        `$(PKG_CONFIG) --libs fontconfig` \
-       `$(PKG_CONFIG) --libs freetype2`
+       `$(PKG_CONFIG) --libs freetype2` \
+       `$(PKG_CONFIG) --libs harfbuzz`
 
 # flags
 STCPPFLAGS = -DVERSION=\"$(VERSION)\" -D_XOPEN_SOURCE=600
diff --git a/hb.c b/hb.c
new file mode 100644
index 0000000..7df2828
--- /dev/null
+++ b/hb.c
@@ -0,0 +1,136 @@
+#include <stdlib.h>
+#include <stdio.h>
+#include <math.h>
+#include <X11/Xft/Xft.h>
+#include <hb.h>
+#include <hb-ft.h>
+
+#include "st.h"
+
+void hbtransformsegment(XftFont *xfont, const Glyph *string, hb_codepoint_t *codepoints, int start, int length);
+hb_font_t *hbfindfont(XftFont *match);
+
+typedef struct {
+	XftFont *match;
+	hb_font_t *font;
+} HbFontMatch;
+
+static int hbfontslen = 0;
+static HbFontMatch *hbfontcache = NULL;
+
+void
+hbunloadfonts()
+{
+	for (int i = 0; i < hbfontslen; i++) {
+		hb_font_destroy(hbfontcache[i].font);
+		XftUnlockFace(hbfontcache[i].match);
+	}
+
+	if (hbfontcache != NULL) {
+		free(hbfontcache);
+		hbfontcache = NULL;
+	}
+	hbfontslen = 0;
+}
+
+hb_font_t *
+hbfindfont(XftFont *match)
+{
+	for (int i = 0; i < hbfontslen; i++) {
+		if (hbfontcache[i].match == match)
+			return hbfontcache[i].font;
+	}
+
+	/* Font not found in cache, caching it now. */
+	hbfontcache = realloc(hbfontcache, sizeof(HbFontMatch) * (hbfontslen + 1));
+	FT_Face face = XftLockFace(match);
+	hb_font_t *font = hb_ft_font_create(face, NULL);
+	if (font == NULL)
+		die("Failed to load Harfbuzz font.");
+
+	hbfontcache[hbfontslen].match = match;
+	hbfontcache[hbfontslen].font = font;
+	hbfontslen += 1;
+
+	return font;
+}
+
+void
+hbtransform(XftGlyphFontSpec *specs, const Glyph *glyphs, size_t len, int x, int y)
+{
+	int start = 0, length = 1, gstart = 0;
+	hb_codepoint_t *codepoints = calloc(len, sizeof(hb_codepoint_t));
+
+	for (int idx = 1, specidx = 1; idx < len; idx++) {
+		if (glyphs[idx].mode & ATTR_WDUMMY) {
+			length += 1;
+			continue;
+		}
+
+		if (specs[specidx].font != specs[start].font || ATTRCMP(glyphs[gstart], glyphs[idx]) || selected(x + idx, y) != selected(x + gstart, y)) {
+			hbtransformsegment(specs[start].font, glyphs, codepoints, gstart, length);
+
+			/* Reset the sequence. */
+			length = 1;
+			start = specidx;
+			gstart = idx;
+		} else {
+			length += 1;
+		}
+
+		specidx++;
+	}
+
+	/* EOL. */
+	hbtransformsegment(specs[start].font, glyphs, codepoints, gstart, length);
+
+	/* Apply the transformation to glyph specs. */
+	for (int i = 0, specidx = 0; i < len; i++) {
+		if (glyphs[i].mode & ATTR_WDUMMY)
+			continue;
+
+		if (codepoints[i] != specs[specidx].glyph)
+			((Glyph *)glyphs)[i].mode |= ATTR_LIGA;
+
+		specs[specidx++].glyph = codepoints[i];
+	}
+
+	free(codepoints);
+}
+
+void
+hbtransformsegment(XftFont *xfont, const Glyph *string, hb_codepoint_t *codepoints, int start, int length)
+{
+	hb_font_t *font = hbfindfont(xfont);
+	if (font == NULL)
+		return;
+
+	Rune rune;
+	ushort mode = USHRT_MAX;
+	hb_buffer_t *buffer = hb_buffer_create();
+	hb_buffer_set_direction(buffer, HB_DIRECTION_LTR);
+
+	/* Fill buffer with codepoints. */
+	for (int i = start; i < (start+length); i++) {
+		rune = string[i].u;
+		mode = string[i].mode;
+		if (mode & ATTR_WDUMMY)
+			rune = 0x0020;
+		hb_buffer_add_codepoints(buffer, &rune, 1, 0, 1);
+	}
+
+	/* Shape the segment. */
+	hb_shape(font, buffer, NULL, 0);
+
+	/* Get new glyph info. */
+	hb_glyph_info_t *info = hb_buffer_get_glyph_infos(buffer, NULL);
+
+	/* Write new codepoints. */
+	for (int i = 0; i < length; i++) {
+		hb_codepoint_t gid = info[i].codepoint;
+		codepoints[start+i] = gid;
+	}
+
+	/* Cleanup. */
+	hb_buffer_destroy(buffer);
+}
diff --git a/hb.h b/hb.h
new file mode 100644
index 0000000..b3e02d0
--- /dev/null
+++ b/hb.h
@@ -0,0 +1,7 @@
+#include <X11/Xft/Xft.h>
+#include <hb.h>
+#include <hb-ft.h>
+
+void hbunloadfonts();
+void hbtransform(XftGlyphFontSpec *, const Glyph *, size_t, int, int);
+
diff --git a/hb.o b/hb.o
new file mode 100644
index 0000000000000000000000000000000000000000..8df67a1659ebae4e256f3f214f0aa1a9c4943ba8
GIT binary patch
literal 4576
zcmbVQZEPGz8J_iRnk8}fj@D_9Ho$=vbd+$lDV2O+koSCc=E{a3YA1~v_j2Cb%bjBT
z%-tSJqBN~^y@=IvP>CN1egOX}1V7*h^oz8y<K!w7P!RM3B)(}CWJCfHRz(BH`_9hT
zlf^4ljI}%SKJW8>%*?wpCqFi6O${gt5ltbVBAb#x3Hi3ZIUZ-jadImeBr^}v_FuL3
zCmD1)`#kp4`wd-wU8VjuCi$n*+Ld6$fw6QTx6dotccbR9OVnpBXs7Qc0%ebpQM);!
z?N#mJ+4DhA>b>RPkNVE~>G$zq-2;8P{702`twe%mlkVqf`y32jYW<^qQK9xaU48@d
zVxfX4UXYUaJ1+KKK#yFwKs)E$kNLY0qV@`1{=G_L+#pH4s@7gnyg=(+;ki-2s;yn4
zT^8e+4QFf5ng`7T=8QSbl1~@Be^PJS&`j^rq}MA`U;RKDqj-5EIdYE2R}DxY{>0Bg
zAu@VFWvm{PC%WpGnO%MKV8Q++^?pH@|D;;Vn%Ujkr^;o_c3;=smN3tzz-E17o0|8o
z#Pcx-F+{trF=Rf2JN+y?<T)Hs?`jaHeLi7jueUA*D%4Z&Z`2<%n3}DS;7)e>r}t2A
zWuN_L>Yp;S2fFH0W_N$Tpj>*O>prFWJ3NiHSB798RGPikx+)B*4>K*(4+ryZ#bNo<
z56_y1%~|sivv{6Gx@pNqsdvgqQ13eRTth2(uXvVW<Y6*tz9z3Sn}XLXwEv^T&m4j&
zSzUX`Jd1PdsRqu2&A690QYbu+3Jbg@O|Q2$Wwv|D+P#zBoBp6d{b?gfeF#MTM}x(O
zd{s|{i1S9ud=X8}_63DP4Hw$0i9+_b@h83opm*3%&G^%*vA(LdzDI3f2Ok3_ul&1U
zzl;TH`Lo2z?!L42B(;YOR<bduhRS_8^*jA_LgF2_-|w3kGn>=moeGz<Y;G{#c?cv>
z8QrlYq!@fmun>D-1B}?1v4Ld)i+AopTbSElEEwdyw=AF~sSS&OC1QH7!F(<6UwpQQ
zAx(cQ78C+ofc8c8IhYuE5nmQ8Ok(Y`Qt80vbJIMUjxx)Ao%PnT<@EzM?bT6fYax}q
zH;z>St9KDr?v*dR9DiD0zo53(CVlm5)b3$omU21&iE+)n{P<6`il?u=gyG3lsW$JF
zQ*J#qUoVwYwA84~wN9Q)RqBgwhLF7z6CY2d_kL#PL#dJB%t&UK8Nq9a50sOiBg*lF
za`)hN?Mc`~tcu-S*TUY^6K4iYJ=u=s_0+(;o&><uwKS;mocF{3<$ZOBAeuV~1^p7|
z-iL*f(-U7A$mz*1$8vhAtLF6dm$sSu@R?goeYCwjuOEr+Qg-O00GWCkC_n|1oUWNW
zEinHv_oWZK4PQ&Kvr)ddn=Ly`Qzd`zZ>5ZFc_R=KgTJj>3_OL~EdVHhYg{21@8r1P
z3q8s)vT+3nHS1$!`%SVCVjJECLI}HFBK=@iH@EkLc$+j|Ruh0>Ati36GHEITKM;YJ
zBk&sF7+1t&H3pa)!9Nv&e=!38Mg;y%z%lMUSOCyiy+Z#3c($7FN(BDv2>f~kej@_E
z1M=7^ZaM<b0*?95;<o{feIw9MM)0i&oK)vBHoWj0Y0f)~d}x>KszWl?#4rG@MLcsD
zgB15#`*WsM+&?w-;N*01+RRy#Mc@=sT`W6Iw^2Vq9;&!AU}PVgD%lRHG#m&0))tu)
z(r`-iphT7>IOxF*oY<gu9a65Lk=rOOHY@eULen|A;4HcrYOYnOIE^CbZ30aPGN?5i
z+pX1cB7#^dmy342>@3x5FiBK2tEDCME*M9_^631DrE0OZSgA7#4<cq%EH>SeeXM9#
zj}<F$7K8CdYQzra({$z`wu7a<@kQeH;5RQ$jQ5}tn!s<s-GnV2z>JGOIR$<%$HV+l
zi658vxe#BRH=hpS!vBoq2kTGZheP}~gEae<5Y9#NcnBA9{SYqv|0n`yKcqp2_P4<!
z_$v|opKu)cw@dt2B^>WS;pcUZi}e(F;`fS8;DR56??%Q2|1JsN0R+J}IF7ts5`Iv^
z@$47;nuOme;U^?KDdCqT{9O`$Rl@I*@Ea0-w}ju16NQF(?uJL?b4bGR4iR`)!rv?5
zZ%FtZ65injkN#5<{`Cm_R}wD!xt%XKb~2ulaJg<V7B)<ar^aN;-kZ3%Z}6VMCivn$
zILFXUT%5Bc(>$@@mgb;$8$n+cqlPnI%DB#Pmt@K%w?r~?%_hk->L?(6Br`%Xc71`J
zW0}Re>tx^;+eg^J0z9;Ks>Mp9wBYdQ|9_VPQ{4LSO+OA8wqtz#0x95%G4@z1NEwGm
zZbz`#p&jS@g(AigzhAIcv3(F8#5oNi*1j8xD{$n>Z4U_OGi?8TZa*lKIah{8KtP`#
zl|dK_dvOj6wTLhJaZuoRSP*#sGaet$8o3EO(HB4|#xm~@Z*%^SaC^Ci(a#lbuZ5h8
z^%t=Y!2qe_0^t2?w+4eFT*m!FTVXHu58a1jqscY?(=^F9W+z~{7h(H%02bamfQW_)
aXfvVwLn6U5ax42${{NUN^RoF0+y563zG)Hw

literal 0
HcmV?d00001

diff --git a/st b/st
new file mode 100755
index 0000000000000000000000000000000000000000..fc55d57bc376eae029c0c4b47e861db09a32d910
GIT binary patch
literal 103528
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
WDt^U_$A#U>?+r@MWSxNSR{MYE7rJZ!

literal 0
HcmV?d00001

diff --git a/st.c b/st.c
index ef8abd5..3605160 100644
--- a/st.c
+++ b/st.c
@@ -35,6 +35,7 @@
 #define ESC_ARG_SIZ   16
 #define STR_BUF_SIZ   ESC_BUF_SIZ
 #define STR_ARG_SIZ   ESC_ARG_SIZ
+#define HISTSIZE      2000
 
 /* macros */
 #define IS_SET(flag)		((term.mode & (flag)) != 0)
@@ -42,6 +43,9 @@
 #define ISCONTROLC1(c)		(BETWEEN(c, 0x80, 0x9f))
 #define ISCONTROL(c)		(ISCONTROLC0(c) || ISCONTROLC1(c))
 #define ISDELIM(u)		(u && wcschr(worddelimiters, u))
+#define TLINE(y)		((y) < term.scr ? term.hist[((y) + term.histi - \
+				term.scr + HISTSIZE + 1) % HISTSIZE] : \
+				term.line[(y) - term.scr])
 
 enum term_mode {
 	MODE_WRAP        = 1 << 0,
@@ -117,6 +121,9 @@ typedef struct {
 	int col;      /* nb col */
 	Line *line;   /* screen */
 	Line *alt;    /* alternate screen */
+	Line hist[HISTSIZE]; /* history buffer */
+	int histi;    /* history index */
+	int scr;      /* scroll back */
 	int *dirty;   /* dirtyness of lines */
 	TCursor c;    /* cursor */
 	int ocx;      /* old cursor col */
@@ -186,8 +193,8 @@ static void tnewline(int);
 static void tputtab(int);
 static void tputc(Rune);
 static void treset(void);
-static void tscrollup(int, int);
-static void tscrolldown(int, int);
+static void tscrollup(int, int, int);
+static void tscrolldown(int, int, int);
 static void tsetattr(int *, int);
 static void tsetchar(Rune, Glyph *, int, int);
 static void tsetdirt(int, int);
@@ -416,10 +423,10 @@ tlinelen(int y)
 {
 	int i = term.col;
 
-	if (term.line[y][i - 1].mode & ATTR_WRAP)
+	if (TLINE(y)[i - 1].mode & ATTR_WRAP)
 		return i;
 
-	while (i > 0 && term.line[y][i - 1].u == ' ')
+	while (i > 0 && TLINE(y)[i - 1].u == ' ')
 		--i;
 
 	return i;
@@ -528,7 +535,7 @@ selsnap(int *x, int *y, int direction)
 		 * Snap around if the word wraps around at the end or
 		 * beginning of a line.
 		 */
-		prevgp = &term.line[*y][*x];
+		prevgp = &TLINE(*y)[*x];
 		prevdelim = ISDELIM(prevgp->u);
 		for (;;) {
 			newx = *x + direction;
@@ -543,14 +550,14 @@ selsnap(int *x, int *y, int direction)
 					yt = *y, xt = *x;
 				else
 					yt = newy, xt = newx;
-				if (!(term.line[yt][xt].mode & ATTR_WRAP))
+				if (!(TLINE(yt)[xt].mode & ATTR_WRAP))
 					break;
 			}
 
 			if (newx >= tlinelen(newy))
 				break;
 
-			gp = &term.line[newy][newx];
+			gp = &TLINE(newy)[newx];
 			delim = ISDELIM(gp->u);
 			if (!(gp->mode & ATTR_WDUMMY) && (delim != prevdelim
 					|| (delim && gp->u != prevgp->u)))
@@ -571,14 +578,14 @@ selsnap(int *x, int *y, int direction)
 		*x = (direction < 0) ? 0 : term.col - 1;
 		if (direction < 0) {
 			for (; *y > 0; *y += direction) {
-				if (!(term.line[*y-1][term.col-1].mode
+				if (!(TLINE(*y-1)[term.col-1].mode
 						& ATTR_WRAP)) {
 					break;
 				}
 			}
 		} else if (direction > 0) {
 			for (; *y < term.row-1; *y += direction) {
-				if (!(term.line[*y][term.col-1].mode
+				if (!(TLINE(*y)[term.col-1].mode
 						& ATTR_WRAP)) {
 					break;
 				}
@@ -609,13 +616,13 @@ getsel(void)
 		}
 
 		if (sel.type == SEL_RECTANGULAR) {
-			gp = &term.line[y][sel.nb.x];
+			gp = &TLINE(y)[sel.nb.x];
 			lastx = sel.ne.x;
 		} else {
-			gp = &term.line[y][sel.nb.y == y ? sel.nb.x : 0];
+			gp = &TLINE(y)[sel.nb.y == y ? sel.nb.x : 0];
 			lastx = (sel.ne.y == y) ? sel.ne.x : term.col-1;
 		}
-		last = &term.line[y][MIN(lastx, linelen-1)];
+		last = &TLINE(y)[MIN(lastx, linelen-1)];
 		while (last >= gp && last->u == ' ')
 			--last;
 
@@ -850,6 +857,9 @@ void
 ttywrite(const char *s, size_t n, int may_echo)
 {
 	const char *next;
+	Arg arg = (Arg) { .i = term.scr };
+
+	kscrolldown(&arg);
 
 	if (may_echo && IS_SET(MODE_ECHO))
 		twrite(s, n, 1);
@@ -1061,13 +1071,53 @@ tswapscreen(void)
 }
 
 void
-tscrolldown(int orig, int n)
+kscrolldown(const Arg* a)
+{
+	int n = a->i;
+
+	if (n < 0)
+		n = term.row + n;
+
+	if (n > term.scr)
+		n = term.scr;
+
+	if (term.scr > 0) {
+		term.scr -= n;
+		selscroll(0, -n);
+		tfulldirt();
+	}
+}
+
+void
+kscrollup(const Arg* a)
+{
+	int n = a->i;
+
+	if (n < 0)
+		n = term.row + n;
+
+	if (term.scr <= HISTSIZE-n) {
+		term.scr += n;
+		selscroll(0, n);
+		tfulldirt();
+	}
+}
+
+void
+tscrolldown(int orig, int n, int copyhist)
 {
 	int i;
 	Line temp;
 
 	LIMIT(n, 0, term.bot-orig+1);
 
+	if (copyhist) {
+		term.histi = (term.histi - 1 + HISTSIZE) % HISTSIZE;
+		temp = term.hist[term.histi];
+		term.hist[term.histi] = term.line[term.bot];
+		term.line[term.bot] = temp;
+	}
+
 	tsetdirt(orig, term.bot-n);
 	tclearregion(0, term.bot-n+1, term.col-1, term.bot);
 
@@ -1077,17 +1127,28 @@ tscrolldown(int orig, int n)
 		term.line[i-n] = temp;
 	}
 
-	selscroll(orig, n);
+	if (term.scr == 0)
+		selscroll(orig, n);
 }
 
 void
-tscrollup(int orig, int n)
+tscrollup(int orig, int n, int copyhist)
 {
 	int i;
 	Line temp;
 
 	LIMIT(n, 0, term.bot-orig+1);
 
+	if (copyhist) {
+		term.histi = (term.histi + 1) % HISTSIZE;
+		temp = term.hist[term.histi];
+		term.hist[term.histi] = term.line[orig];
+		term.line[orig] = temp;
+	}
+
+	if (term.scr > 0 && term.scr < HISTSIZE)
+		term.scr = MIN(term.scr + n, HISTSIZE-1);
+
 	tclearregion(0, orig, term.col-1, orig+n-1);
 	tsetdirt(orig+n, term.bot);
 
@@ -1097,7 +1158,8 @@ tscrollup(int orig, int n)
 		term.line[i+n] = temp;
 	}
 
-	selscroll(orig, -n);
+	if (term.scr == 0)
+		selscroll(orig, -n);
 }
 
 void
@@ -1126,7 +1188,7 @@ tnewline(int first_col)
 	int y = term.c.y;
 
 	if (y == term.bot) {
-		tscrollup(term.top, 1);
+		tscrollup(term.top, 1, 1);
 	} else {
 		y++;
 	}
@@ -1291,14 +1353,14 @@ void
 tinsertblankline(int n)
 {
 	if (BETWEEN(term.c.y, term.top, term.bot))
-		tscrolldown(term.c.y, n);
+		tscrolldown(term.c.y, n, 0);
 }
 
 void
 tdeleteline(int n)
 {
 	if (BETWEEN(term.c.y, term.top, term.bot))
-		tscrollup(term.c.y, n);
+		tscrollup(term.c.y, n, 0);
 }
 
 int32_t
@@ -1735,11 +1797,11 @@ csihandle(void)
 		break;
 	case 'S': /* SU -- Scroll <n> line up */
 		DEFAULT(csiescseq.arg[0], 1);
-		tscrollup(term.top, csiescseq.arg[0]);
+		tscrollup(term.top, csiescseq.arg[0], 0);
 		break;
 	case 'T': /* SD -- Scroll <n> line down */
 		DEFAULT(csiescseq.arg[0], 1);
-		tscrolldown(term.top, csiescseq.arg[0]);
+		tscrolldown(term.top, csiescseq.arg[0], 0);
 		break;
 	case 'L': /* IL -- Insert <n> blank lines */
 		DEFAULT(csiescseq.arg[0], 1);
@@ -2246,7 +2308,7 @@ eschandle(uchar ascii)
 		return 0;
 	case 'D': /* IND -- Linefeed */
 		if (term.c.y == term.bot) {
-			tscrollup(term.top, 1);
+			tscrollup(term.top, 1, 1);
 		} else {
 			tmoveto(term.c.x, term.c.y+1);
 		}
@@ -2259,7 +2321,7 @@ eschandle(uchar ascii)
 		break;
 	case 'M': /* RI -- Reverse index */
 		if (term.c.y == term.top) {
-			tscrolldown(term.top, 1);
+			tscrolldown(term.top, 1, 1);
 		} else {
 			tmoveto(term.c.x, term.c.y-1);
 		}
@@ -2481,7 +2543,7 @@ twrite(const char *buf, int buflen, int show_ctrl)
 void
 tresize(int col, int row)
 {
-	int i;
+	int i, j;
 	int minrow = MIN(row, term.row);
 	int mincol = MIN(col, term.col);
 	int *bp;
@@ -2518,6 +2580,14 @@ tresize(int col, int row)
 	term.dirty = xrealloc(term.dirty, row * sizeof(*term.dirty));
 	term.tabs = xrealloc(term.tabs, col * sizeof(*term.tabs));
 
+	for (i = 0; i < HISTSIZE; i++) {
+		term.hist[i] = xrealloc(term.hist[i], col * sizeof(Glyph));
+		for (j = mincol; j < col; j++) {
+			term.hist[i][j] = term.c.attr;
+			term.hist[i][j].u = ' ';
+		}
+	}
+
 	/* resize each row to new width, zero-pad if needed */
 	for (i = 0; i < minrow; i++) {
 		term.line[i] = xrealloc(term.line[i], col * sizeof(Glyph));
@@ -2576,7 +2646,7 @@ drawregion(int x1, int y1, int x2, int y2)
 			continue;
 
 		term.dirty[y] = 0;
-		xdrawline(term.line[y], x1, y, x2);
+		xdrawline(TLINE(y), x1, y, x2);
 	}
 }
 
@@ -2597,8 +2667,10 @@ draw(void)
 		cx--;
 
 	drawregion(0, 0, term.col, term.row);
-	xdrawcursor(cx, term.c.y, term.line[term.c.y][cx],
-			term.ocx, term.ocy, term.line[term.ocy][term.ocx]);
+	if (term.scr == 0)
+		xdrawcursor(cx, term.c.y, term.line[term.c.y][cx],
+				term.ocx, term.ocy, term.line[term.ocy][term.ocx],
+				term.line[term.ocy], term.col);
 	term.ocx = cx;
 	term.ocy = term.c.y;
 	xfinishdraw();
diff --git a/st.c.orig b/st.c.orig
new file mode 100644
index 0000000..18d3488
--- /dev/null
+++ b/st.c.orig
@@ -0,0 +1,2685 @@
+/* See LICENSE for license details. */
+#include <ctype.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <limits.h>
+#include <pwd.h>
+#include <stdarg.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <signal.h>
+#include <sys/ioctl.h>
+#include <sys/select.h>
+#include <sys/types.h>
+#include <sys/wait.h>
+#include <termios.h>
+#include <unistd.h>
+#include <wchar.h>
+
+#include "st.h"
+#include "win.h"
+
+#if   defined(__linux)
+ #include <pty.h>
+#elif defined(__OpenBSD__) || defined(__NetBSD__) || defined(__APPLE__)
+ #include <util.h>
+#elif defined(__FreeBSD__) || defined(__DragonFly__)
+ #include <libutil.h>
+#endif
+
+/* Arbitrary sizes */
+#define UTF_INVALID   0xFFFD
+#define UTF_SIZ       4
+#define ESC_BUF_SIZ   (128*UTF_SIZ)
+#define ESC_ARG_SIZ   16
+#define STR_BUF_SIZ   ESC_BUF_SIZ
+#define STR_ARG_SIZ   ESC_ARG_SIZ
+#define HISTSIZE      2000
+
+/* macros */
+#define IS_SET(flag)		((term.mode & (flag)) != 0)
+#define ISCONTROLC0(c)		(BETWEEN(c, 0, 0x1f) || (c) == 0x7f)
+#define ISCONTROLC1(c)		(BETWEEN(c, 0x80, 0x9f))
+#define ISCONTROL(c)		(ISCONTROLC0(c) || ISCONTROLC1(c))
+#define ISDELIM(u)		(u && wcschr(worddelimiters, u))
+#define TLINE(y)		((y) < term.scr ? term.hist[((y) + term.histi - \
+				term.scr + HISTSIZE + 1) % HISTSIZE] : \
+				term.line[(y) - term.scr])
+
+enum term_mode {
+	MODE_WRAP        = 1 << 0,
+	MODE_INSERT      = 1 << 1,
+	MODE_ALTSCREEN   = 1 << 2,
+	MODE_CRLF        = 1 << 3,
+	MODE_ECHO        = 1 << 4,
+	MODE_PRINT       = 1 << 5,
+	MODE_UTF8        = 1 << 6,
+	MODE_SIXEL       = 1 << 7,
+};
+
+enum cursor_movement {
+	CURSOR_SAVE,
+	CURSOR_LOAD
+};
+
+enum cursor_state {
+	CURSOR_DEFAULT  = 0,
+	CURSOR_WRAPNEXT = 1,
+	CURSOR_ORIGIN   = 2
+};
+
+enum charset {
+	CS_GRAPHIC0,
+	CS_GRAPHIC1,
+	CS_UK,
+	CS_USA,
+	CS_MULTI,
+	CS_GER,
+	CS_FIN
+};
+
+enum escape_state {
+	ESC_START      = 1,
+	ESC_CSI        = 2,
+	ESC_STR        = 4,  /* OSC, PM, APC */
+	ESC_ALTCHARSET = 8,
+	ESC_STR_END    = 16, /* a final string was encountered */
+	ESC_TEST       = 32, /* Enter in test mode */
+	ESC_UTF8       = 64,
+	ESC_DCS        =128,
+};
+
+typedef struct {
+	Glyph attr; /* current char attributes */
+	int x;
+	int y;
+	char state;
+} TCursor;
+
+typedef struct {
+	int mode;
+	int type;
+	int snap;
+	/*
+	 * Selection variables:
+	 * nb – normalized coordinates of the beginning of the selection
+	 * ne – normalized coordinates of the end of the selection
+	 * ob – original coordinates of the beginning of the selection
+	 * oe – original coordinates of the end of the selection
+	 */
+	struct {
+		int x, y;
+	} nb, ne, ob, oe;
+
+	int alt;
+} Selection;
+
+/* Internal representation of the screen */
+typedef struct {
+	int row;      /* nb row */
+	int col;      /* nb col */
+	Line *line;   /* screen */
+	Line *alt;    /* alternate screen */
+	Line hist[HISTSIZE]; /* history buffer */
+	int histi;    /* history index */
+	int scr;      /* scroll back */
+	int *dirty;   /* dirtyness of lines */
+	TCursor c;    /* cursor */
+	int ocx;      /* old cursor col */
+	int ocy;      /* old cursor row */
+	int top;      /* top    scroll limit */
+	int bot;      /* bottom scroll limit */
+	int mode;     /* terminal mode flags */
+	int esc;      /* escape state flags */
+	char trantbl[4]; /* charset table translation */
+	int charset;  /* current charset */
+	int icharset; /* selected charset for sequence */
+	int *tabs;
+	Rune lastc;   /* last printed char outside of sequence, 0 if control */
+} Term;
+
+/* CSI Escape sequence structs */
+/* ESC '[' [[ [<priv>] <arg> [;]] <mode> [<mode>]] */
+typedef struct {
+	char buf[ESC_BUF_SIZ]; /* raw string */
+	size_t len;            /* raw string length */
+	char priv;
+	int arg[ESC_ARG_SIZ];
+	int narg;              /* nb of args */
+	char mode[2];
+} CSIEscape;
+
+/* STR Escape sequence structs */
+/* ESC type [[ [<priv>] <arg> [;]] <mode>] ESC '\' */
+typedef struct {
+	char type;             /* ESC type ... */
+	char *buf;             /* allocated raw string */
+	size_t siz;            /* allocation size */
+	size_t len;            /* raw string length */
+	char *args[STR_ARG_SIZ];
+	int narg;              /* nb of args */
+} STREscape;
+
+static void execsh(char *, char **);
+static void stty(char **);
+static void sigchld(int);
+static void ttywriteraw(const char *, size_t);
+
+static void csidump(void);
+static void csihandle(void);
+static void csiparse(void);
+static void csireset(void);
+static int eschandle(uchar);
+static void strdump(void);
+static void strhandle(void);
+static void strparse(void);
+static void strreset(void);
+
+static void tprinter(char *, size_t);
+static void tdumpsel(void);
+static void tdumpline(int);
+static void tdump(void);
+static void tclearregion(int, int, int, int);
+static void tcursor(int);
+static void tdeletechar(int);
+static void tdeleteline(int);
+static void tinsertblank(int);
+static void tinsertblankline(int);
+static int tlinelen(int);
+static void tmoveto(int, int);
+static void tmoveato(int, int);
+static void tnewline(int);
+static void tputtab(int);
+static void tputc(Rune);
+static void treset(void);
+static void tscrollup(int, int, int);
+static void tscrolldown(int, int, int);
+static void tsetattr(int *, int);
+static void tsetchar(Rune, Glyph *, int, int);
+static void tsetdirt(int, int);
+static void tsetscroll(int, int);
+static void tswapscreen(void);
+static void tsetmode(int, int, int *, int);
+static int twrite(const char *, int, int);
+static void tfulldirt(void);
+static void tcontrolcode(uchar );
+static void tdectest(char );
+static void tdefutf8(char);
+static int32_t tdefcolor(int *, int *, int);
+static void tdeftran(char);
+static void tstrsequence(uchar);
+
+static void drawregion(int, int, int, int);
+
+static void selnormalize(void);
+static void selscroll(int, int);
+static void selsnap(int *, int *, int);
+
+static size_t utf8decode(const char *, Rune *, size_t);
+static Rune utf8decodebyte(char, size_t *);
+static char utf8encodebyte(Rune, size_t);
+static size_t utf8validate(Rune *, size_t);
+
+static char *base64dec(const char *);
+static char base64dec_getc(const char **);
+
+static ssize_t xwrite(int, const char *, size_t);
+
+/* Globals */
+static Term term;
+static Selection sel;
+static CSIEscape csiescseq;
+static STREscape strescseq;
+static int iofd = 1;
+static int cmdfd;
+static pid_t pid;
+
+static uchar utfbyte[UTF_SIZ + 1] = {0x80,    0, 0xC0, 0xE0, 0xF0};
+static uchar utfmask[UTF_SIZ + 1] = {0xC0, 0x80, 0xE0, 0xF0, 0xF8};
+static Rune utfmin[UTF_SIZ + 1] = {       0,    0,  0x80,  0x800,  0x10000};
+static Rune utfmax[UTF_SIZ + 1] = {0x10FFFF, 0x7F, 0x7FF, 0xFFFF, 0x10FFFF};
+
+ssize_t
+xwrite(int fd, const char *s, size_t len)
+{
+	size_t aux = len;
+	ssize_t r;
+
+	while (len > 0) {
+		r = write(fd, s, len);
+		if (r < 0)
+			return r;
+		len -= r;
+		s += r;
+	}
+
+	return aux;
+}
+
+void *
+xmalloc(size_t len)
+{
+	void *p;
+
+	if (!(p = malloc(len)))
+		die("malloc: %s\n", strerror(errno));
+
+	return p;
+}
+
+void *
+xrealloc(void *p, size_t len)
+{
+	if ((p = realloc(p, len)) == NULL)
+		die("realloc: %s\n", strerror(errno));
+
+	return p;
+}
+
+char *
+xstrdup(char *s)
+{
+	if ((s = strdup(s)) == NULL)
+		die("strdup: %s\n", strerror(errno));
+
+	return s;
+}
+
+size_t
+utf8decode(const char *c, Rune *u, size_t clen)
+{
+	size_t i, j, len, type;
+	Rune udecoded;
+
+	*u = UTF_INVALID;
+	if (!clen)
+		return 0;
+	udecoded = utf8decodebyte(c[0], &len);
+	if (!BETWEEN(len, 1, UTF_SIZ))
+		return 1;
+	for (i = 1, j = 1; i < clen && j < len; ++i, ++j) {
+		udecoded = (udecoded << 6) | utf8decodebyte(c[i], &type);
+		if (type != 0)
+			return j;
+	}
+	if (j < len)
+		return 0;
+	*u = udecoded;
+	utf8validate(u, len);
+
+	return len;
+}
+
+Rune
+utf8decodebyte(char c, size_t *i)
+{
+	for (*i = 0; *i < LEN(utfmask); ++(*i))
+		if (((uchar)c & utfmask[*i]) == utfbyte[*i])
+			return (uchar)c & ~utfmask[*i];
+
+	return 0;
+}
+
+size_t
+utf8encode(Rune u, char *c)
+{
+	size_t len, i;
+
+	len = utf8validate(&u, 0);
+	if (len > UTF_SIZ)
+		return 0;
+
+	for (i = len - 1; i != 0; --i) {
+		c[i] = utf8encodebyte(u, 0);
+		u >>= 6;
+	}
+	c[0] = utf8encodebyte(u, len);
+
+	return len;
+}
+
+char
+utf8encodebyte(Rune u, size_t i)
+{
+	return utfbyte[i] | (u & ~utfmask[i]);
+}
+
+size_t
+utf8validate(Rune *u, size_t i)
+{
+	if (!BETWEEN(*u, utfmin[i], utfmax[i]) || BETWEEN(*u, 0xD800, 0xDFFF))
+		*u = UTF_INVALID;
+	for (i = 1; *u > utfmax[i]; ++i)
+		;
+
+	return i;
+}
+
+static const char base64_digits[] = {
+	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0,
+	63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0, 0, -1, 0, 0, 0, 0, 1,
+	2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
+	22, 23, 24, 25, 0, 0, 0, 0, 0, 0, 26, 27, 28, 29, 30, 31, 32, 33, 34,
+	35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0,
+	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
+};
+
+char
+base64dec_getc(const char **src)
+{
+	while (**src && !isprint(**src))
+		(*src)++;
+	return **src ? *((*src)++) : '=';  /* emulate padding if string ends */
+}
+
+char *
+base64dec(const char *src)
+{
+	size_t in_len = strlen(src);
+	char *result, *dst;
+
+	if (in_len % 4)
+		in_len += 4 - (in_len % 4);
+	result = dst = xmalloc(in_len / 4 * 3 + 1);
+	while (*src) {
+		int a = base64_digits[(unsigned char) base64dec_getc(&src)];
+		int b = base64_digits[(unsigned char) base64dec_getc(&src)];
+		int c = base64_digits[(unsigned char) base64dec_getc(&src)];
+		int d = base64_digits[(unsigned char) base64dec_getc(&src)];
+
+		/* invalid input. 'a' can be -1, e.g. if src is "\n" (c-str) */
+		if (a == -1 || b == -1)
+			break;
+
+		*dst++ = (a << 2) | ((b & 0x30) >> 4);
+		if (c == -1)
+			break;
+		*dst++ = ((b & 0x0f) << 4) | ((c & 0x3c) >> 2);
+		if (d == -1)
+			break;
+		*dst++ = ((c & 0x03) << 6) | d;
+	}
+	*dst = '\0';
+	return result;
+}
+
+void
+selinit(void)
+{
+	sel.mode = SEL_IDLE;
+	sel.snap = 0;
+	sel.ob.x = -1;
+}
+
+int
+tlinelen(int y)
+{
+	int i = term.col;
+
+	if (TLINE(y)[i - 1].mode & ATTR_WRAP)
+		return i;
+
+	while (i > 0 && TLINE(y)[i - 1].u == ' ')
+		--i;
+
+	return i;
+}
+
+void
+selstart(int col, int row, int snap)
+{
+	selclear();
+	sel.mode = SEL_EMPTY;
+	sel.type = SEL_REGULAR;
+	sel.alt = IS_SET(MODE_ALTSCREEN);
+	sel.snap = snap;
+	sel.oe.x = sel.ob.x = col;
+	sel.oe.y = sel.ob.y = row;
+	selnormalize();
+
+	if (sel.snap != 0)
+		sel.mode = SEL_READY;
+	tsetdirt(sel.nb.y, sel.ne.y);
+}
+
+void
+selextend(int col, int row, int type, int done)
+{
+	int oldey, oldex, oldsby, oldsey, oldtype;
+
+	if (sel.mode == SEL_IDLE)
+		return;
+	if (done && sel.mode == SEL_EMPTY) {
+		selclear();
+		return;
+	}
+
+	oldey = sel.oe.y;
+	oldex = sel.oe.x;
+	oldsby = sel.nb.y;
+	oldsey = sel.ne.y;
+	oldtype = sel.type;
+
+	sel.oe.x = col;
+	sel.oe.y = row;
+	selnormalize();
+	sel.type = type;
+
+	if (oldey != sel.oe.y || oldex != sel.oe.x || oldtype != sel.type || sel.mode == SEL_EMPTY)
+		tsetdirt(MIN(sel.nb.y, oldsby), MAX(sel.ne.y, oldsey));
+
+	sel.mode = done ? SEL_IDLE : SEL_READY;
+}
+
+void
+selnormalize(void)
+{
+	int i;
+
+	if (sel.type == SEL_REGULAR && sel.ob.y != sel.oe.y) {
+		sel.nb.x = sel.ob.y < sel.oe.y ? sel.ob.x : sel.oe.x;
+		sel.ne.x = sel.ob.y < sel.oe.y ? sel.oe.x : sel.ob.x;
+	} else {
+		sel.nb.x = MIN(sel.ob.x, sel.oe.x);
+		sel.ne.x = MAX(sel.ob.x, sel.oe.x);
+	}
+	sel.nb.y = MIN(sel.ob.y, sel.oe.y);
+	sel.ne.y = MAX(sel.ob.y, sel.oe.y);
+
+	selsnap(&sel.nb.x, &sel.nb.y, -1);
+	selsnap(&sel.ne.x, &sel.ne.y, +1);
+
+	/* expand selection over line breaks */
+	if (sel.type == SEL_RECTANGULAR)
+		return;
+	i = tlinelen(sel.nb.y);
+	if (i < sel.nb.x)
+		sel.nb.x = i;
+	if (tlinelen(sel.ne.y) <= sel.ne.x)
+		sel.ne.x = term.col - 1;
+}
+
+int
+selected(int x, int y)
+{
+	if (sel.mode == SEL_EMPTY || sel.ob.x == -1 ||
+			sel.alt != IS_SET(MODE_ALTSCREEN))
+		return 0;
+
+	if (sel.type == SEL_RECTANGULAR)
+		return BETWEEN(y, sel.nb.y, sel.ne.y)
+		    && BETWEEN(x, sel.nb.x, sel.ne.x);
+
+	return BETWEEN(y, sel.nb.y, sel.ne.y)
+	    && (y != sel.nb.y || x >= sel.nb.x)
+	    && (y != sel.ne.y || x <= sel.ne.x);
+}
+
+void
+selsnap(int *x, int *y, int direction)
+{
+	int newx, newy, xt, yt;
+	int delim, prevdelim;
+	Glyph *gp, *prevgp;
+
+	switch (sel.snap) {
+	case SNAP_WORD:
+		/*
+		 * Snap around if the word wraps around at the end or
+		 * beginning of a line.
+		 */
+		prevgp = &TLINE(*y)[*x];
+		prevdelim = ISDELIM(prevgp->u);
+		for (;;) {
+			newx = *x + direction;
+			newy = *y;
+			if (!BETWEEN(newx, 0, term.col - 1)) {
+				newy += direction;
+				newx = (newx + term.col) % term.col;
+				if (!BETWEEN(newy, 0, term.row - 1))
+					break;
+
+				if (direction > 0)
+					yt = *y, xt = *x;
+				else
+					yt = newy, xt = newx;
+				if (!(TLINE(yt)[xt].mode & ATTR_WRAP))
+					break;
+			}
+
+			if (newx >= tlinelen(newy))
+				break;
+
+			gp = &TLINE(newy)[newx];
+			delim = ISDELIM(gp->u);
+			if (!(gp->mode & ATTR_WDUMMY) && (delim != prevdelim
+					|| (delim && gp->u != prevgp->u)))
+				break;
+
+			*x = newx;
+			*y = newy;
+			prevgp = gp;
+			prevdelim = delim;
+		}
+		break;
+	case SNAP_LINE:
+		/*
+		 * Snap around if the the previous line or the current one
+		 * has set ATTR_WRAP at its end. Then the whole next or
+		 * previous line will be selected.
+		 */
+		*x = (direction < 0) ? 0 : term.col - 1;
+		if (direction < 0) {
+			for (; *y > 0; *y += direction) {
+				if (!(TLINE(*y-1)[term.col-1].mode
+						& ATTR_WRAP)) {
+					break;
+				}
+			}
+		} else if (direction > 0) {
+			for (; *y < term.row-1; *y += direction) {
+				if (!(TLINE(*y)[term.col-1].mode
+						& ATTR_WRAP)) {
+					break;
+				}
+			}
+		}
+		break;
+	}
+}
+
+char *
+getsel(void)
+{
+	char *str, *ptr;
+	int y, bufsize, lastx, linelen;
+	Glyph *gp, *last;
+
+	if (sel.ob.x == -1)
+		return NULL;
+
+	bufsize = (term.col+1) * (sel.ne.y-sel.nb.y+1) * UTF_SIZ;
+	ptr = str = xmalloc(bufsize);
+
+	/* append every set & selected glyph to the selection */
+	for (y = sel.nb.y; y <= sel.ne.y; y++) {
+		if ((linelen = tlinelen(y)) == 0) {
+			*ptr++ = '\n';
+			continue;
+		}
+
+		if (sel.type == SEL_RECTANGULAR) {
+			gp = &TLINE(y)[sel.nb.x];
+			lastx = sel.ne.x;
+		} else {
+			gp = &TLINE(y)[sel.nb.y == y ? sel.nb.x : 0];
+			lastx = (sel.ne.y == y) ? sel.ne.x : term.col-1;
+		}
+		last = &TLINE(y)[MIN(lastx, linelen-1)];
+		while (last >= gp && last->u == ' ')
+			--last;
+
+		for ( ; gp <= last; ++gp) {
+			if (gp->mode & ATTR_WDUMMY)
+				continue;
+
+			ptr += utf8encode(gp->u, ptr);
+		}
+
+		/*
+		 * Copy and pasting of line endings is inconsistent
+		 * in the inconsistent terminal and GUI world.
+		 * The best solution seems like to produce '\n' when
+		 * something is copied from st and convert '\n' to
+		 * '\r', when something to be pasted is received by
+		 * st.
+		 * FIXME: Fix the computer world.
+		 */
+		if ((y < sel.ne.y || lastx >= linelen) &&
+		    (!(last->mode & ATTR_WRAP) || sel.type == SEL_RECTANGULAR))
+			*ptr++ = '\n';
+	}
+	*ptr = 0;
+	return str;
+}
+
+void
+selclear(void)
+{
+	if (sel.ob.x == -1)
+		return;
+	sel.mode = SEL_IDLE;
+	sel.ob.x = -1;
+	tsetdirt(sel.nb.y, sel.ne.y);
+}
+
+void
+die(const char *errstr, ...)
+{
+	va_list ap;
+
+	va_start(ap, errstr);
+	vfprintf(stderr, errstr, ap);
+	va_end(ap);
+	exit(1);
+}
+
+void
+execsh(char *cmd, char **args)
+{
+	char *sh, *prog, *arg;
+	const struct passwd *pw;
+
+	errno = 0;
+	if ((pw = getpwuid(getuid())) == NULL) {
+		if (errno)
+			die("getpwuid: %s\n", strerror(errno));
+		else
+			die("who are you?\n");
+	}
+
+	if ((sh = getenv("SHELL")) == NULL)
+		sh = (pw->pw_shell[0]) ? pw->pw_shell : cmd;
+
+	if (args) {
+		prog = args[0];
+		arg = NULL;
+	} else if (scroll) {
+		prog = scroll;
+		arg = utmp ? utmp : sh;
+	} else if (utmp) {
+		prog = utmp;
+		arg = NULL;
+	} else {
+		prog = sh;
+		arg = NULL;
+	}
+	DEFAULT(args, ((char *[]) {prog, arg, NULL}));
+
+	unsetenv("COLUMNS");
+	unsetenv("LINES");
+	unsetenv("TERMCAP");
+	setenv("LOGNAME", pw->pw_name, 1);
+	setenv("USER", pw->pw_name, 1);
+	setenv("SHELL", sh, 1);
+	setenv("HOME", pw->pw_dir, 1);
+	setenv("TERM", termname, 1);
+
+	signal(SIGCHLD, SIG_DFL);
+	signal(SIGHUP, SIG_DFL);
+	signal(SIGINT, SIG_DFL);
+	signal(SIGQUIT, SIG_DFL);
+	signal(SIGTERM, SIG_DFL);
+	signal(SIGALRM, SIG_DFL);
+
+	execvp(prog, args);
+	_exit(1);
+}
+
+void
+sigchld(int a)
+{
+	int stat;
+	pid_t p;
+
+	if ((p = waitpid(pid, &stat, WNOHANG)) < 0)
+		die("waiting for pid %hd failed: %s\n", pid, strerror(errno));
+
+	if (pid != p)
+		return;
+
+	if (WIFEXITED(stat) && WEXITSTATUS(stat))
+		die("child exited with status %d\n", WEXITSTATUS(stat));
+	else if (WIFSIGNALED(stat))
+		die("child terminated due to signal %d\n", WTERMSIG(stat));
+	_exit(0);
+}
+
+void
+stty(char **args)
+{
+	char cmd[_POSIX_ARG_MAX], **p, *q, *s;
+	size_t n, siz;
+
+	if ((n = strlen(stty_args)) > sizeof(cmd)-1)
+		die("incorrect stty parameters\n");
+	memcpy(cmd, stty_args, n);
+	q = cmd + n;
+	siz = sizeof(cmd) - n;
+	for (p = args; p && (s = *p); ++p) {
+		if ((n = strlen(s)) > siz-1)
+			die("stty parameter length too long\n");
+		*q++ = ' ';
+		memcpy(q, s, n);
+		q += n;
+		siz -= n + 1;
+	}
+	*q = '\0';
+	if (system(cmd) != 0)
+		perror("Couldn't call stty");
+}
+
+int
+ttynew(char *line, char *cmd, char *out, char **args)
+{
+	int m, s;
+
+	if (out) {
+		term.mode |= MODE_PRINT;
+		iofd = (!strcmp(out, "-")) ?
+			  1 : open(out, O_WRONLY | O_CREAT, 0666);
+		if (iofd < 0) {
+			fprintf(stderr, "Error opening %s:%s\n",
+				out, strerror(errno));
+		}
+	}
+
+	if (line) {
+		if ((cmdfd = open(line, O_RDWR)) < 0)
+			die("open line '%s' failed: %s\n",
+			    line, strerror(errno));
+		dup2(cmdfd, 0);
+		stty(args);
+		return cmdfd;
+	}
+
+	/* seems to work fine on linux, openbsd and freebsd */
+	if (openpty(&m, &s, NULL, NULL, NULL) < 0)
+		die("openpty failed: %s\n", strerror(errno));
+
+	switch (pid = fork()) {
+	case -1:
+		die("fork failed: %s\n", strerror(errno));
+		break;
+	case 0:
+		close(iofd);
+		setsid(); /* create a new process group */
+		dup2(s, 0);
+		dup2(s, 1);
+		dup2(s, 2);
+		if (ioctl(s, TIOCSCTTY, NULL) < 0)
+			die("ioctl TIOCSCTTY failed: %s\n", strerror(errno));
+		close(s);
+		close(m);
+#ifdef __OpenBSD__
+		if (pledge("stdio getpw proc exec", NULL) == -1)
+			die("pledge\n");
+#endif
+		execsh(cmd, args);
+		break;
+	default:
+#ifdef __OpenBSD__
+		if (pledge("stdio rpath tty proc", NULL) == -1)
+			die("pledge\n");
+#endif
+		close(s);
+		cmdfd = m;
+		signal(SIGCHLD, sigchld);
+		break;
+	}
+	return cmdfd;
+}
+
+size_t
+ttyread(void)
+{
+	static char buf[BUFSIZ];
+	static int buflen = 0;
+	int ret, written;
+
+	/* append read bytes to unprocessed bytes */
+	ret = read(cmdfd, buf+buflen, LEN(buf)-buflen);
+
+	switch (ret) {
+	case 0:
+		exit(0);
+	case -1:
+		die("couldn't read from shell: %s\n", strerror(errno));
+	default:
+		buflen += ret;
+		written = twrite(buf, buflen, 0);
+		buflen -= written;
+		/* keep any incomplete UTF-8 byte sequence for the next call */
+		if (buflen > 0)
+			memmove(buf, buf + written, buflen);
+		return ret;
+	}
+}
+
+void
+ttywrite(const char *s, size_t n, int may_echo)
+{
+	const char *next;
+	Arg arg = (Arg) { .i = term.scr };
+
+	kscrolldown(&arg);
+
+	if (may_echo && IS_SET(MODE_ECHO))
+		twrite(s, n, 1);
+
+	if (!IS_SET(MODE_CRLF)) {
+		ttywriteraw(s, n);
+		return;
+	}
+
+	/* This is similar to how the kernel handles ONLCR for ttys */
+	while (n > 0) {
+		if (*s == '\r') {
+			next = s + 1;
+			ttywriteraw("\r\n", 2);
+		} else {
+			next = memchr(s, '\r', n);
+			DEFAULT(next, s + n);
+			ttywriteraw(s, next - s);
+		}
+		n -= next - s;
+		s = next;
+	}
+}
+
+void
+ttywriteraw(const char *s, size_t n)
+{
+	fd_set wfd, rfd;
+	ssize_t r;
+	size_t lim = 256;
+
+	/*
+	 * Remember that we are using a pty, which might be a modem line.
+	 * Writing too much will clog the line. That's why we are doing this
+	 * dance.
+	 * FIXME: Migrate the world to Plan 9.
+	 */
+	while (n > 0) {
+		FD_ZERO(&wfd);
+		FD_ZERO(&rfd);
+		FD_SET(cmdfd, &wfd);
+		FD_SET(cmdfd, &rfd);
+
+		/* Check if we can write. */
+		if (pselect(cmdfd+1, &rfd, &wfd, NULL, NULL, NULL) < 0) {
+			if (errno == EINTR)
+				continue;
+			die("select failed: %s\n", strerror(errno));
+		}
+		if (FD_ISSET(cmdfd, &wfd)) {
+			/*
+			 * Only write the bytes written by ttywrite() or the
+			 * default of 256. This seems to be a reasonable value
+			 * for a serial line. Bigger values might clog the I/O.
+			 */
+			if ((r = write(cmdfd, s, (n < lim)? n : lim)) < 0)
+				goto write_error;
+			if (r < n) {
+				/*
+				 * We weren't able to write out everything.
+				 * This means the buffer is getting full
+				 * again. Empty it.
+				 */
+				if (n < lim)
+					lim = ttyread();
+				n -= r;
+				s += r;
+			} else {
+				/* All bytes have been written. */
+				break;
+			}
+		}
+		if (FD_ISSET(cmdfd, &rfd))
+			lim = ttyread();
+	}
+	return;
+
+write_error:
+	die("write error on tty: %s\n", strerror(errno));
+}
+
+void
+ttyresize(int tw, int th)
+{
+	struct winsize w;
+
+	w.ws_row = term.row;
+	w.ws_col = term.col;
+	w.ws_xpixel = tw;
+	w.ws_ypixel = th;
+	if (ioctl(cmdfd, TIOCSWINSZ, &w) < 0)
+		fprintf(stderr, "Couldn't set window size: %s\n", strerror(errno));
+}
+
+void
+ttyhangup()
+{
+	/* Send SIGHUP to shell */
+	kill(pid, SIGHUP);
+}
+
+int
+tattrset(int attr)
+{
+	int i, j;
+
+	for (i = 0; i < term.row-1; i++) {
+		for (j = 0; j < term.col-1; j++) {
+			if (term.line[i][j].mode & attr)
+				return 1;
+		}
+	}
+
+	return 0;
+}
+
+void
+tsetdirt(int top, int bot)
+{
+	int i;
+
+	LIMIT(top, 0, term.row-1);
+	LIMIT(bot, 0, term.row-1);
+
+	for (i = top; i <= bot; i++)
+		term.dirty[i] = 1;
+}
+
+void
+tsetdirtattr(int attr)
+{
+	int i, j;
+
+	for (i = 0; i < term.row-1; i++) {
+		for (j = 0; j < term.col-1; j++) {
+			if (term.line[i][j].mode & attr) {
+				tsetdirt(i, i);
+				break;
+			}
+		}
+	}
+}
+
+void
+tfulldirt(void)
+{
+	tsetdirt(0, term.row-1);
+}
+
+void
+tcursor(int mode)
+{
+	static TCursor c[2];
+	int alt = IS_SET(MODE_ALTSCREEN);
+
+	if (mode == CURSOR_SAVE) {
+		c[alt] = term.c;
+	} else if (mode == CURSOR_LOAD) {
+		term.c = c[alt];
+		tmoveto(c[alt].x, c[alt].y);
+	}
+}
+
+void
+treset(void)
+{
+	uint i;
+
+	term.c = (TCursor){{
+		.mode = ATTR_NULL,
+		.fg = defaultfg,
+		.bg = defaultbg
+	}, .x = 0, .y = 0, .state = CURSOR_DEFAULT};
+
+	memset(term.tabs, 0, term.col * sizeof(*term.tabs));
+	for (i = tabspaces; i < term.col; i += tabspaces)
+		term.tabs[i] = 1;
+	term.top = 0;
+	term.bot = term.row - 1;
+	term.mode = MODE_WRAP|MODE_UTF8;
+	memset(term.trantbl, CS_USA, sizeof(term.trantbl));
+	term.charset = 0;
+
+	for (i = 0; i < 2; i++) {
+		tmoveto(0, 0);
+		tcursor(CURSOR_SAVE);
+		tclearregion(0, 0, term.col-1, term.row-1);
+		tswapscreen();
+	}
+}
+
+void
+tnew(int col, int row)
+{
+	term = (Term){ .c = { .attr = { .fg = defaultfg, .bg = defaultbg } } };
+	tresize(col, row);
+	treset();
+}
+
+void
+tswapscreen(void)
+{
+	Line *tmp = term.line;
+
+	term.line = term.alt;
+	term.alt = tmp;
+	term.mode ^= MODE_ALTSCREEN;
+	tfulldirt();
+}
+
+void
+kscrolldown(const Arg* a)
+{
+	int n = a->i;
+
+	if (n < 0)
+		n = term.row + n;
+
+	if (n > term.scr)
+		n = term.scr;
+
+	if (term.scr > 0) {
+		term.scr -= n;
+		selscroll(0, -n);
+		tfulldirt();
+	}
+}
+
+void
+kscrollup(const Arg* a)
+{
+	int n = a->i;
+
+	if (n < 0)
+		n = term.row + n;
+
+	if (term.scr <= HISTSIZE-n) {
+		term.scr += n;
+		selscroll(0, n);
+		tfulldirt();
+	}
+}
+
+void
+tscrolldown(int orig, int n, int copyhist)
+{
+	int i;
+	Line temp;
+
+	LIMIT(n, 0, term.bot-orig+1);
+
+	if (copyhist) {
+		term.histi = (term.histi - 1 + HISTSIZE) % HISTSIZE;
+		temp = term.hist[term.histi];
+		term.hist[term.histi] = term.line[term.bot];
+		term.line[term.bot] = temp;
+	}
+
+	tsetdirt(orig, term.bot-n);
+	tclearregion(0, term.bot-n+1, term.col-1, term.bot);
+
+	for (i = term.bot; i >= orig+n; i--) {
+		temp = term.line[i];
+		term.line[i] = term.line[i-n];
+		term.line[i-n] = temp;
+	}
+
+	if (term.scr == 0)
+		selscroll(orig, n);
+}
+
+void
+tscrollup(int orig, int n, int copyhist)
+{
+	int i;
+	Line temp;
+
+	LIMIT(n, 0, term.bot-orig+1);
+
+	if (copyhist) {
+		term.histi = (term.histi + 1) % HISTSIZE;
+		temp = term.hist[term.histi];
+		term.hist[term.histi] = term.line[orig];
+		term.line[orig] = temp;
+	}
+
+	if (term.scr > 0 && term.scr < HISTSIZE)
+		term.scr = MIN(term.scr + n, HISTSIZE-1);
+
+	tclearregion(0, orig, term.col-1, orig+n-1);
+	tsetdirt(orig+n, term.bot);
+
+	for (i = orig; i <= term.bot-n; i++) {
+		temp = term.line[i];
+		term.line[i] = term.line[i+n];
+		term.line[i+n] = temp;
+	}
+
+	if (term.scr == 0)
+		selscroll(orig, -n);
+}
+
+void
+selscroll(int orig, int n)
+{
+	if (sel.ob.x == -1)
+		return;
+
+	if (BETWEEN(sel.nb.y, orig, term.bot) != BETWEEN(sel.ne.y, orig, term.bot)) {
+		selclear();
+	} else if (BETWEEN(sel.nb.y, orig, term.bot)) {
+		sel.ob.y += n;
+		sel.oe.y += n;
+		if (sel.ob.y < term.top || sel.ob.y > term.bot ||
+		    sel.oe.y < term.top || sel.oe.y > term.bot) {
+			selclear();
+		} else {
+			selnormalize();
+		}
+	}
+}
+
+void
+tnewline(int first_col)
+{
+	int y = term.c.y;
+
+	if (y == term.bot) {
+		tscrollup(term.top, 1, 1);
+	} else {
+		y++;
+	}
+	tmoveto(first_col ? 0 : term.c.x, y);
+}
+
+void
+csiparse(void)
+{
+	char *p = csiescseq.buf, *np;
+	long int v;
+
+	csiescseq.narg = 0;
+	if (*p == '?') {
+		csiescseq.priv = 1;
+		p++;
+	}
+
+	csiescseq.buf[csiescseq.len] = '\0';
+	while (p < csiescseq.buf+csiescseq.len) {
+		np = NULL;
+		v = strtol(p, &np, 10);
+		if (np == p)
+			v = 0;
+		if (v == LONG_MAX || v == LONG_MIN)
+			v = -1;
+		csiescseq.arg[csiescseq.narg++] = v;
+		p = np;
+		if (*p != ';' || csiescseq.narg == ESC_ARG_SIZ)
+			break;
+		p++;
+	}
+	csiescseq.mode[0] = *p++;
+	csiescseq.mode[1] = (p < csiescseq.buf+csiescseq.len) ? *p : '\0';
+}
+
+/* for absolute user moves, when decom is set */
+void
+tmoveato(int x, int y)
+{
+	tmoveto(x, y + ((term.c.state & CURSOR_ORIGIN) ? term.top: 0));
+}
+
+void
+tmoveto(int x, int y)
+{
+	int miny, maxy;
+
+	if (term.c.state & CURSOR_ORIGIN) {
+		miny = term.top;
+		maxy = term.bot;
+	} else {
+		miny = 0;
+		maxy = term.row - 1;
+	}
+	term.c.state &= ~CURSOR_WRAPNEXT;
+	term.c.x = LIMIT(x, 0, term.col-1);
+	term.c.y = LIMIT(y, miny, maxy);
+}
+
+void
+tsetchar(Rune u, Glyph *attr, int x, int y)
+{
+	static char *vt100_0[62] = { /* 0x41 - 0x7e */
+		"↑", "↓", "→", "←", "█", "▚", "☃", /* A - G */
+		0, 0, 0, 0, 0, 0, 0, 0, /* H - O */
+		0, 0, 0, 0, 0, 0, 0, 0, /* P - W */
+		0, 0, 0, 0, 0, 0, 0, " ", /* X - _ */
+		"◆", "▒", "␉", "␌", "␍", "␊", "°", "±", /* ` - g */
+		"␤", "␋", "┘", "┐", "┌", "└", "┼", "⎺", /* h - o */
+		"⎻", "─", "⎼", "⎽", "├", "┤", "┴", "┬", /* p - w */
+		"│", "≤", "≥", "π", "≠", "£", "·", /* x - ~ */
+	};
+
+	/*
+	 * The table is proudly stolen from rxvt.
+	 */
+	if (term.trantbl[term.charset] == CS_GRAPHIC0 &&
+	   BETWEEN(u, 0x41, 0x7e) && vt100_0[u - 0x41])
+		utf8decode(vt100_0[u - 0x41], &u, UTF_SIZ);
+
+	if (term.line[y][x].mode & ATTR_WIDE) {
+		if (x+1 < term.col) {
+			term.line[y][x+1].u = ' ';
+			term.line[y][x+1].mode &= ~ATTR_WDUMMY;
+		}
+	} else if (term.line[y][x].mode & ATTR_WDUMMY) {
+		term.line[y][x-1].u = ' ';
+		term.line[y][x-1].mode &= ~ATTR_WIDE;
+	}
+
+	term.dirty[y] = 1;
+	term.line[y][x] = *attr;
+	term.line[y][x].u = u;
+}
+
+void
+tclearregion(int x1, int y1, int x2, int y2)
+{
+	int x, y, temp;
+	Glyph *gp;
+
+	if (x1 > x2)
+		temp = x1, x1 = x2, x2 = temp;
+	if (y1 > y2)
+		temp = y1, y1 = y2, y2 = temp;
+
+	LIMIT(x1, 0, term.col-1);
+	LIMIT(x2, 0, term.col-1);
+	LIMIT(y1, 0, term.row-1);
+	LIMIT(y2, 0, term.row-1);
+
+	for (y = y1; y <= y2; y++) {
+		term.dirty[y] = 1;
+		for (x = x1; x <= x2; x++) {
+			gp = &term.line[y][x];
+			if (selected(x, y))
+				selclear();
+			gp->fg = term.c.attr.fg;
+			gp->bg = term.c.attr.bg;
+			gp->mode = 0;
+			gp->u = ' ';
+		}
+	}
+}
+
+void
+tdeletechar(int n)
+{
+	int dst, src, size;
+	Glyph *line;
+
+	LIMIT(n, 0, term.col - term.c.x);
+
+	dst = term.c.x;
+	src = term.c.x + n;
+	size = term.col - src;
+	line = term.line[term.c.y];
+
+	memmove(&line[dst], &line[src], size * sizeof(Glyph));
+	tclearregion(term.col-n, term.c.y, term.col-1, term.c.y);
+}
+
+void
+tinsertblank(int n)
+{
+	int dst, src, size;
+	Glyph *line;
+
+	LIMIT(n, 0, term.col - term.c.x);
+
+	dst = term.c.x + n;
+	src = term.c.x;
+	size = term.col - dst;
+	line = term.line[term.c.y];
+
+	memmove(&line[dst], &line[src], size * sizeof(Glyph));
+	tclearregion(src, term.c.y, dst - 1, term.c.y);
+}
+
+void
+tinsertblankline(int n)
+{
+	if (BETWEEN(term.c.y, term.top, term.bot))
+		tscrolldown(term.c.y, n, 0);
+}
+
+void
+tdeleteline(int n)
+{
+	if (BETWEEN(term.c.y, term.top, term.bot))
+		tscrollup(term.c.y, n, 0);
+}
+
+int32_t
+tdefcolor(int *attr, int *npar, int l)
+{
+	int32_t idx = -1;
+	uint r, g, b;
+
+	switch (attr[*npar + 1]) {
+	case 2: /* direct color in RGB space */
+		if (*npar + 4 >= l) {
+			fprintf(stderr,
+				"erresc(38): Incorrect number of parameters (%d)\n",
+				*npar);
+			break;
+		}
+		r = attr[*npar + 2];
+		g = attr[*npar + 3];
+		b = attr[*npar + 4];
+		*npar += 4;
+		if (!BETWEEN(r, 0, 255) || !BETWEEN(g, 0, 255) || !BETWEEN(b, 0, 255))
+			fprintf(stderr, "erresc: bad rgb color (%u,%u,%u)\n",
+				r, g, b);
+		else
+			idx = TRUECOLOR(r, g, b);
+		break;
+	case 5: /* indexed color */
+		if (*npar + 2 >= l) {
+			fprintf(stderr,
+				"erresc(38): Incorrect number of parameters (%d)\n",
+				*npar);
+			break;
+		}
+		*npar += 2;
+		if (!BETWEEN(attr[*npar], 0, 255))
+			fprintf(stderr, "erresc: bad fgcolor %d\n", attr[*npar]);
+		else
+			idx = attr[*npar];
+		break;
+	case 0: /* implemented defined (only foreground) */
+	case 1: /* transparent */
+	case 3: /* direct color in CMY space */
+	case 4: /* direct color in CMYK space */
+	default:
+		fprintf(stderr,
+		        "erresc(38): gfx attr %d unknown\n", attr[*npar]);
+		break;
+	}
+
+	return idx;
+}
+
+void
+tsetattr(int *attr, int l)
+{
+	int i;
+	int32_t idx;
+
+	for (i = 0; i < l; i++) {
+		switch (attr[i]) {
+		case 0:
+			term.c.attr.mode &= ~(
+				ATTR_BOLD       |
+				ATTR_FAINT      |
+				ATTR_ITALIC     |
+				ATTR_UNDERLINE  |
+				ATTR_BLINK      |
+				ATTR_REVERSE    |
+				ATTR_INVISIBLE  |
+				ATTR_STRUCK     );
+			term.c.attr.fg = defaultfg;
+			term.c.attr.bg = defaultbg;
+			break;
+		case 1:
+			term.c.attr.mode |= ATTR_BOLD;
+			break;
+		case 2:
+			term.c.attr.mode |= ATTR_FAINT;
+			break;
+		case 3:
+			term.c.attr.mode |= ATTR_ITALIC;
+			break;
+		case 4:
+			term.c.attr.mode |= ATTR_UNDERLINE;
+			break;
+		case 5: /* slow blink */
+			/* FALLTHROUGH */
+		case 6: /* rapid blink */
+			term.c.attr.mode |= ATTR_BLINK;
+			break;
+		case 7:
+			term.c.attr.mode |= ATTR_REVERSE;
+			break;
+		case 8:
+			term.c.attr.mode |= ATTR_INVISIBLE;
+			break;
+		case 9:
+			term.c.attr.mode |= ATTR_STRUCK;
+			break;
+		case 22:
+			term.c.attr.mode &= ~(ATTR_BOLD | ATTR_FAINT);
+			break;
+		case 23:
+			term.c.attr.mode &= ~ATTR_ITALIC;
+			break;
+		case 24:
+			term.c.attr.mode &= ~ATTR_UNDERLINE;
+			break;
+		case 25:
+			term.c.attr.mode &= ~ATTR_BLINK;
+			break;
+		case 27:
+			term.c.attr.mode &= ~ATTR_REVERSE;
+			break;
+		case 28:
+			term.c.attr.mode &= ~ATTR_INVISIBLE;
+			break;
+		case 29:
+			term.c.attr.mode &= ~ATTR_STRUCK;
+			break;
+		case 38:
+			if ((idx = tdefcolor(attr, &i, l)) >= 0)
+				term.c.attr.fg = idx;
+			break;
+		case 39:
+			term.c.attr.fg = defaultfg;
+			break;
+		case 48:
+			if ((idx = tdefcolor(attr, &i, l)) >= 0)
+				term.c.attr.bg = idx;
+			break;
+		case 49:
+			term.c.attr.bg = defaultbg;
+			break;
+		default:
+			if (BETWEEN(attr[i], 30, 37)) {
+				term.c.attr.fg = attr[i] - 30;
+			} else if (BETWEEN(attr[i], 40, 47)) {
+				term.c.attr.bg = attr[i] - 40;
+			} else if (BETWEEN(attr[i], 90, 97)) {
+				term.c.attr.fg = attr[i] - 90 + 8;
+			} else if (BETWEEN(attr[i], 100, 107)) {
+				term.c.attr.bg = attr[i] - 100 + 8;
+			} else {
+				fprintf(stderr,
+					"erresc(default): gfx attr %d unknown\n",
+					attr[i]);
+				csidump();
+			}
+			break;
+		}
+	}
+}
+
+void
+tsetscroll(int t, int b)
+{
+	int temp;
+
+	LIMIT(t, 0, term.row-1);
+	LIMIT(b, 0, term.row-1);
+	if (t > b) {
+		temp = t;
+		t = b;
+		b = temp;
+	}
+	term.top = t;
+	term.bot = b;
+}
+
+void
+tsetmode(int priv, int set, int *args, int narg)
+{
+	int alt, *lim;
+
+	for (lim = args + narg; args < lim; ++args) {
+		if (priv) {
+			switch (*args) {
+			case 1: /* DECCKM -- Cursor key */
+				xsetmode(set, MODE_APPCURSOR);
+				break;
+			case 5: /* DECSCNM -- Reverse video */
+				xsetmode(set, MODE_REVERSE);
+				break;
+			case 6: /* DECOM -- Origin */
+				MODBIT(term.c.state, set, CURSOR_ORIGIN);
+				tmoveato(0, 0);
+				break;
+			case 7: /* DECAWM -- Auto wrap */
+				MODBIT(term.mode, set, MODE_WRAP);
+				break;
+			case 0:  /* Error (IGNORED) */
+			case 2:  /* DECANM -- ANSI/VT52 (IGNORED) */
+			case 3:  /* DECCOLM -- Column  (IGNORED) */
+			case 4:  /* DECSCLM -- Scroll (IGNORED) */
+			case 8:  /* DECARM -- Auto repeat (IGNORED) */
+			case 18: /* DECPFF -- Printer feed (IGNORED) */
+			case 19: /* DECPEX -- Printer extent (IGNORED) */
+			case 42: /* DECNRCM -- National characters (IGNORED) */
+			case 12: /* att610 -- Start blinking cursor (IGNORED) */
+				break;
+			case 25: /* DECTCEM -- Text Cursor Enable Mode */
+				xsetmode(!set, MODE_HIDE);
+				break;
+			case 9:    /* X10 mouse compatibility mode */
+				xsetpointermotion(0);
+				xsetmode(0, MODE_MOUSE);
+				xsetmode(set, MODE_MOUSEX10);
+				break;
+			case 1000: /* 1000: report button press */
+				xsetpointermotion(0);
+				xsetmode(0, MODE_MOUSE);
+				xsetmode(set, MODE_MOUSEBTN);
+				break;
+			case 1002: /* 1002: report motion on button press */
+				xsetpointermotion(0);
+				xsetmode(0, MODE_MOUSE);
+				xsetmode(set, MODE_MOUSEMOTION);
+				break;
+			case 1003: /* 1003: enable all mouse motions */
+				xsetpointermotion(set);
+				xsetmode(0, MODE_MOUSE);
+				xsetmode(set, MODE_MOUSEMANY);
+				break;
+			case 1004: /* 1004: send focus events to tty */
+				xsetmode(set, MODE_FOCUS);
+				break;
+			case 1006: /* 1006: extended reporting mode */
+				xsetmode(set, MODE_MOUSESGR);
+				break;
+			case 1034:
+				xsetmode(set, MODE_8BIT);
+				break;
+			case 1049: /* swap screen & set/restore cursor as xterm */
+				if (!allowaltscreen)
+					break;
+				tcursor((set) ? CURSOR_SAVE : CURSOR_LOAD);
+				/* FALLTHROUGH */
+			case 47: /* swap screen */
+			case 1047:
+				if (!allowaltscreen)
+					break;
+				alt = IS_SET(MODE_ALTSCREEN);
+				if (alt) {
+					tclearregion(0, 0, term.col-1,
+							term.row-1);
+				}
+				if (set ^ alt) /* set is always 1 or 0 */
+					tswapscreen();
+				if (*args != 1049)
+					break;
+				/* FALLTHROUGH */
+			case 1048:
+				tcursor((set) ? CURSOR_SAVE : CURSOR_LOAD);
+				break;
+			case 2004: /* 2004: bracketed paste mode */
+				xsetmode(set, MODE_BRCKTPASTE);
+				break;
+			/* Not implemented mouse modes. See comments there. */
+			case 1001: /* mouse highlight mode; can hang the
+				      terminal by design when implemented. */
+			case 1005: /* UTF-8 mouse mode; will confuse
+				      applications not supporting UTF-8
+				      and luit. */
+			case 1015: /* urxvt mangled mouse mode; incompatible
+				      and can be mistaken for other control
+				      codes. */
+				break;
+			default:
+				fprintf(stderr,
+					"erresc: unknown private set/reset mode %d\n",
+					*args);
+				break;
+			}
+		} else {
+			switch (*args) {
+			case 0:  /* Error (IGNORED) */
+				break;
+			case 2:
+				xsetmode(set, MODE_KBDLOCK);
+				break;
+			case 4:  /* IRM -- Insertion-replacement */
+				MODBIT(term.mode, set, MODE_INSERT);
+				break;
+			case 12: /* SRM -- Send/Receive */
+				MODBIT(term.mode, !set, MODE_ECHO);
+				break;
+			case 20: /* LNM -- Linefeed/new line */
+				MODBIT(term.mode, set, MODE_CRLF);
+				break;
+			default:
+				fprintf(stderr,
+					"erresc: unknown set/reset mode %d\n",
+					*args);
+				break;
+			}
+		}
+	}
+}
+
+void
+csihandle(void)
+{
+	char buf[40];
+	int len;
+
+	switch (csiescseq.mode[0]) {
+	default:
+	unknown:
+		fprintf(stderr, "erresc: unknown csi ");
+		csidump();
+		/* die(""); */
+		break;
+	case '@': /* ICH -- Insert <n> blank char */
+		DEFAULT(csiescseq.arg[0], 1);
+		tinsertblank(csiescseq.arg[0]);
+		break;
+	case 'A': /* CUU -- Cursor <n> Up */
+		DEFAULT(csiescseq.arg[0], 1);
+		tmoveto(term.c.x, term.c.y-csiescseq.arg[0]);
+		break;
+	case 'B': /* CUD -- Cursor <n> Down */
+	case 'e': /* VPR --Cursor <n> Down */
+		DEFAULT(csiescseq.arg[0], 1);
+		tmoveto(term.c.x, term.c.y+csiescseq.arg[0]);
+		break;
+	case 'i': /* MC -- Media Copy */
+		switch (csiescseq.arg[0]) {
+		case 0:
+			tdump();
+			break;
+		case 1:
+			tdumpline(term.c.y);
+			break;
+		case 2:
+			tdumpsel();
+			break;
+		case 4:
+			term.mode &= ~MODE_PRINT;
+			break;
+		case 5:
+			term.mode |= MODE_PRINT;
+			break;
+		}
+		break;
+	case 'c': /* DA -- Device Attributes */
+		if (csiescseq.arg[0] == 0)
+			ttywrite(vtiden, strlen(vtiden), 0);
+		break;
+	case 'b': /* REP -- if last char is printable print it <n> more times */
+		DEFAULT(csiescseq.arg[0], 1);
+		if (term.lastc)
+			while (csiescseq.arg[0]-- > 0)
+				tputc(term.lastc);
+		break;
+	case 'C': /* CUF -- Cursor <n> Forward */
+	case 'a': /* HPR -- Cursor <n> Forward */
+		DEFAULT(csiescseq.arg[0], 1);
+		tmoveto(term.c.x+csiescseq.arg[0], term.c.y);
+		break;
+	case 'D': /* CUB -- Cursor <n> Backward */
+		DEFAULT(csiescseq.arg[0], 1);
+		tmoveto(term.c.x-csiescseq.arg[0], term.c.y);
+		break;
+	case 'E': /* CNL -- Cursor <n> Down and first col */
+		DEFAULT(csiescseq.arg[0], 1);
+		tmoveto(0, term.c.y+csiescseq.arg[0]);
+		break;
+	case 'F': /* CPL -- Cursor <n> Up and first col */
+		DEFAULT(csiescseq.arg[0], 1);
+		tmoveto(0, term.c.y-csiescseq.arg[0]);
+		break;
+	case 'g': /* TBC -- Tabulation clear */
+		switch (csiescseq.arg[0]) {
+		case 0: /* clear current tab stop */
+			term.tabs[term.c.x] = 0;
+			break;
+		case 3: /* clear all the tabs */
+			memset(term.tabs, 0, term.col * sizeof(*term.tabs));
+			break;
+		default:
+			goto unknown;
+		}
+		break;
+	case 'G': /* CHA -- Move to <col> */
+	case '`': /* HPA */
+		DEFAULT(csiescseq.arg[0], 1);
+		tmoveto(csiescseq.arg[0]-1, term.c.y);
+		break;
+	case 'H': /* CUP -- Move to <row> <col> */
+	case 'f': /* HVP */
+		DEFAULT(csiescseq.arg[0], 1);
+		DEFAULT(csiescseq.arg[1], 1);
+		tmoveato(csiescseq.arg[1]-1, csiescseq.arg[0]-1);
+		break;
+	case 'I': /* CHT -- Cursor Forward Tabulation <n> tab stops */
+		DEFAULT(csiescseq.arg[0], 1);
+		tputtab(csiescseq.arg[0]);
+		break;
+	case 'J': /* ED -- Clear screen */
+		switch (csiescseq.arg[0]) {
+		case 0: /* below */
+			tclearregion(term.c.x, term.c.y, term.col-1, term.c.y);
+			if (term.c.y < term.row-1) {
+				tclearregion(0, term.c.y+1, term.col-1,
+						term.row-1);
+			}
+			break;
+		case 1: /* above */
+			if (term.c.y > 1)
+				tclearregion(0, 0, term.col-1, term.c.y-1);
+			tclearregion(0, term.c.y, term.c.x, term.c.y);
+			break;
+		case 2: /* all */
+			tclearregion(0, 0, term.col-1, term.row-1);
+			break;
+		default:
+			goto unknown;
+		}
+		break;
+	case 'K': /* EL -- Clear line */
+		switch (csiescseq.arg[0]) {
+		case 0: /* right */
+			tclearregion(term.c.x, term.c.y, term.col-1,
+					term.c.y);
+			break;
+		case 1: /* left */
+			tclearregion(0, term.c.y, term.c.x, term.c.y);
+			break;
+		case 2: /* all */
+			tclearregion(0, term.c.y, term.col-1, term.c.y);
+			break;
+		}
+		break;
+	case 'S': /* SU -- Scroll <n> line up */
+		DEFAULT(csiescseq.arg[0], 1);
+		tscrollup(term.top, csiescseq.arg[0], 0);
+		break;
+	case 'T': /* SD -- Scroll <n> line down */
+		DEFAULT(csiescseq.arg[0], 1);
+		tscrolldown(term.top, csiescseq.arg[0], 0);
+		break;
+	case 'L': /* IL -- Insert <n> blank lines */
+		DEFAULT(csiescseq.arg[0], 1);
+		tinsertblankline(csiescseq.arg[0]);
+		break;
+	case 'l': /* RM -- Reset Mode */
+		tsetmode(csiescseq.priv, 0, csiescseq.arg, csiescseq.narg);
+		break;
+	case 'M': /* DL -- Delete <n> lines */
+		DEFAULT(csiescseq.arg[0], 1);
+		tdeleteline(csiescseq.arg[0]);
+		break;
+	case 'X': /* ECH -- Erase <n> char */
+		DEFAULT(csiescseq.arg[0], 1);
+		tclearregion(term.c.x, term.c.y,
+				term.c.x + csiescseq.arg[0] - 1, term.c.y);
+		break;
+	case 'P': /* DCH -- Delete <n> char */
+		DEFAULT(csiescseq.arg[0], 1);
+		tdeletechar(csiescseq.arg[0]);
+		break;
+	case 'Z': /* CBT -- Cursor Backward Tabulation <n> tab stops */
+		DEFAULT(csiescseq.arg[0], 1);
+		tputtab(-csiescseq.arg[0]);
+		break;
+	case 'd': /* VPA -- Move to <row> */
+		DEFAULT(csiescseq.arg[0], 1);
+		tmoveato(term.c.x, csiescseq.arg[0]-1);
+		break;
+	case 'h': /* SM -- Set terminal mode */
+		tsetmode(csiescseq.priv, 1, csiescseq.arg, csiescseq.narg);
+		break;
+	case 'm': /* SGR -- Terminal attribute (color) */
+		tsetattr(csiescseq.arg, csiescseq.narg);
+		break;
+	case 'n': /* DSR – Device Status Report (cursor position) */
+		if (csiescseq.arg[0] == 6) {
+			len = snprintf(buf, sizeof(buf), "\033[%i;%iR",
+					term.c.y+1, term.c.x+1);
+			ttywrite(buf, len, 0);
+		}
+		break;
+	case 'r': /* DECSTBM -- Set Scrolling Region */
+		if (csiescseq.priv) {
+			goto unknown;
+		} else {
+			DEFAULT(csiescseq.arg[0], 1);
+			DEFAULT(csiescseq.arg[1], term.row);
+			tsetscroll(csiescseq.arg[0]-1, csiescseq.arg[1]-1);
+			tmoveato(0, 0);
+		}
+		break;
+	case 's': /* DECSC -- Save cursor position (ANSI.SYS) */
+		tcursor(CURSOR_SAVE);
+		break;
+	case 'u': /* DECRC -- Restore cursor position (ANSI.SYS) */
+		tcursor(CURSOR_LOAD);
+		break;
+	case ' ':
+		switch (csiescseq.mode[1]) {
+		case 'q': /* DECSCUSR -- Set Cursor Style */
+			if (xsetcursor(csiescseq.arg[0]))
+				goto unknown;
+			break;
+		default:
+			goto unknown;
+		}
+		break;
+	}
+}
+
+void
+csidump(void)
+{
+	size_t i;
+	uint c;
+
+	fprintf(stderr, "ESC[");
+	for (i = 0; i < csiescseq.len; i++) {
+		c = csiescseq.buf[i] & 0xff;
+		if (isprint(c)) {
+			putc(c, stderr);
+		} else if (c == '\n') {
+			fprintf(stderr, "(\\n)");
+		} else if (c == '\r') {
+			fprintf(stderr, "(\\r)");
+		} else if (c == 0x1b) {
+			fprintf(stderr, "(\\e)");
+		} else {
+			fprintf(stderr, "(%02x)", c);
+		}
+	}
+	putc('\n', stderr);
+}
+
+void
+csireset(void)
+{
+	memset(&csiescseq, 0, sizeof(csiescseq));
+}
+
+void
+strhandle(void)
+{
+	char *p = NULL, *dec;
+	int j, narg, par;
+
+	term.esc &= ~(ESC_STR_END|ESC_STR);
+	strparse();
+	par = (narg = strescseq.narg) ? atoi(strescseq.args[0]) : 0;
+
+	switch (strescseq.type) {
+	case ']': /* OSC -- Operating System Command */
+		switch (par) {
+		case 0:
+		case 1:
+		case 2:
+			if (narg > 1)
+				xsettitle(strescseq.args[1]);
+			return;
+		case 52:
+			if (narg > 2 && allowwindowops) {
+				dec = base64dec(strescseq.args[2]);
+				if (dec) {
+					xsetsel(dec);
+					xclipcopy();
+				} else {
+					fprintf(stderr, "erresc: invalid base64\n");
+				}
+			}
+			return;
+		case 4: /* color set */
+			if (narg < 3)
+				break;
+			p = strescseq.args[2];
+			/* FALLTHROUGH */
+		case 104: /* color reset, here p = NULL */
+			j = (narg > 1) ? atoi(strescseq.args[1]) : -1;
+			if (xsetcolorname(j, p)) {
+				if (par == 104 && narg <= 1)
+					return; /* color reset without parameter */
+				fprintf(stderr, "erresc: invalid color j=%d, p=%s\n",
+				        j, p ? p : "(null)");
+			} else {
+				/*
+				 * TODO if defaultbg color is changed, borders
+				 * are dirty
+				 */
+				redraw();
+			}
+			return;
+		}
+		break;
+	case 'k': /* old title set compatibility */
+		xsettitle(strescseq.args[0]);
+		return;
+	case 'P': /* DCS -- Device Control String */
+		term.mode |= ESC_DCS;
+	case '_': /* APC -- Application Program Command */
+	case '^': /* PM -- Privacy Message */
+		return;
+	}
+
+	fprintf(stderr, "erresc: unknown str ");
+	strdump();
+}
+
+void
+strparse(void)
+{
+	int c;
+	char *p = strescseq.buf;
+
+	strescseq.narg = 0;
+	strescseq.buf[strescseq.len] = '\0';
+
+	if (*p == '\0')
+		return;
+
+	while (strescseq.narg < STR_ARG_SIZ) {
+		strescseq.args[strescseq.narg++] = p;
+		while ((c = *p) != ';' && c != '\0')
+			++p;
+		if (c == '\0')
+			return;
+		*p++ = '\0';
+	}
+}
+
+void
+strdump(void)
+{
+	size_t i;
+	uint c;
+
+	fprintf(stderr, "ESC%c", strescseq.type);
+	for (i = 0; i < strescseq.len; i++) {
+		c = strescseq.buf[i] & 0xff;
+		if (c == '\0') {
+			putc('\n', stderr);
+			return;
+		} else if (isprint(c)) {
+			putc(c, stderr);
+		} else if (c == '\n') {
+			fprintf(stderr, "(\\n)");
+		} else if (c == '\r') {
+			fprintf(stderr, "(\\r)");
+		} else if (c == 0x1b) {
+			fprintf(stderr, "(\\e)");
+		} else {
+			fprintf(stderr, "(%02x)", c);
+		}
+	}
+	fprintf(stderr, "ESC\\\n");
+}
+
+void
+strreset(void)
+{
+	strescseq = (STREscape){
+		.buf = xrealloc(strescseq.buf, STR_BUF_SIZ),
+		.siz = STR_BUF_SIZ,
+	};
+}
+
+void
+sendbreak(const Arg *arg)
+{
+	if (tcsendbreak(cmdfd, 0))
+		perror("Error sending break");
+}
+
+void
+tprinter(char *s, size_t len)
+{
+	if (iofd != -1 && xwrite(iofd, s, len) < 0) {
+		perror("Error writing to output file");
+		close(iofd);
+		iofd = -1;
+	}
+}
+
+void
+toggleprinter(const Arg *arg)
+{
+	term.mode ^= MODE_PRINT;
+}
+
+void
+printscreen(const Arg *arg)
+{
+	tdump();
+}
+
+void
+printsel(const Arg *arg)
+{
+	tdumpsel();
+}
+
+void
+tdumpsel(void)
+{
+	char *ptr;
+
+	if ((ptr = getsel())) {
+		tprinter(ptr, strlen(ptr));
+		free(ptr);
+	}
+}
+
+void
+tdumpline(int n)
+{
+	char buf[UTF_SIZ];
+	Glyph *bp, *end;
+
+	bp = &term.line[n][0];
+	end = &bp[MIN(tlinelen(n), term.col) - 1];
+	if (bp != end || bp->u != ' ') {
+		for ( ; bp <= end; ++bp)
+			tprinter(buf, utf8encode(bp->u, buf));
+	}
+	tprinter("\n", 1);
+}
+
+void
+tdump(void)
+{
+	int i;
+
+	for (i = 0; i < term.row; ++i)
+		tdumpline(i);
+}
+
+void
+tputtab(int n)
+{
+	uint x = term.c.x;
+
+	if (n > 0) {
+		while (x < term.col && n--)
+			for (++x; x < term.col && !term.tabs[x]; ++x)
+				/* nothing */ ;
+	} else if (n < 0) {
+		while (x > 0 && n++)
+			for (--x; x > 0 && !term.tabs[x]; --x)
+				/* nothing */ ;
+	}
+	term.c.x = LIMIT(x, 0, term.col-1);
+}
+
+void
+tdefutf8(char ascii)
+{
+	if (ascii == 'G')
+		term.mode |= MODE_UTF8;
+	else if (ascii == '@')
+		term.mode &= ~MODE_UTF8;
+}
+
+void
+tdeftran(char ascii)
+{
+	static char cs[] = "0B";
+	static int vcs[] = {CS_GRAPHIC0, CS_USA};
+	char *p;
+
+	if ((p = strchr(cs, ascii)) == NULL) {
+		fprintf(stderr, "esc unhandled charset: ESC ( %c\n", ascii);
+	} else {
+		term.trantbl[term.icharset] = vcs[p - cs];
+	}
+}
+
+void
+tdectest(char c)
+{
+	int x, y;
+
+	if (c == '8') { /* DEC screen alignment test. */
+		for (x = 0; x < term.col; ++x) {
+			for (y = 0; y < term.row; ++y)
+				tsetchar('E', &term.c.attr, x, y);
+		}
+	}
+}
+
+void
+tstrsequence(uchar c)
+{
+	strreset();
+
+	switch (c) {
+	case 0x90:   /* DCS -- Device Control String */
+		c = 'P';
+		term.esc |= ESC_DCS;
+		break;
+	case 0x9f:   /* APC -- Application Program Command */
+		c = '_';
+		break;
+	case 0x9e:   /* PM -- Privacy Message */
+		c = '^';
+		break;
+	case 0x9d:   /* OSC -- Operating System Command */
+		c = ']';
+		break;
+	}
+	strescseq.type = c;
+	term.esc |= ESC_STR;
+}
+
+void
+tcontrolcode(uchar ascii)
+{
+	switch (ascii) {
+	case '\t':   /* HT */
+		tputtab(1);
+		return;
+	case '\b':   /* BS */
+		tmoveto(term.c.x-1, term.c.y);
+		return;
+	case '\r':   /* CR */
+		tmoveto(0, term.c.y);
+		return;
+	case '\f':   /* LF */
+	case '\v':   /* VT */
+	case '\n':   /* LF */
+		/* go to first col if the mode is set */
+		tnewline(IS_SET(MODE_CRLF));
+		return;
+	case '\a':   /* BEL */
+		if (term.esc & ESC_STR_END) {
+			/* backwards compatibility to xterm */
+			strhandle();
+		} else {
+			xbell();
+		}
+		break;
+	case '\033': /* ESC */
+		csireset();
+		term.esc &= ~(ESC_CSI|ESC_ALTCHARSET|ESC_TEST);
+		term.esc |= ESC_START;
+		return;
+	case '\016': /* SO (LS1 -- Locking shift 1) */
+	case '\017': /* SI (LS0 -- Locking shift 0) */
+		term.charset = 1 - (ascii - '\016');
+		return;
+	case '\032': /* SUB */
+		tsetchar('?', &term.c.attr, term.c.x, term.c.y);
+		/* FALLTHROUGH */
+	case '\030': /* CAN */
+		csireset();
+		break;
+	case '\005': /* ENQ (IGNORED) */
+	case '\000': /* NUL (IGNORED) */
+	case '\021': /* XON (IGNORED) */
+	case '\023': /* XOFF (IGNORED) */
+	case 0177:   /* DEL (IGNORED) */
+		return;
+	case 0x80:   /* TODO: PAD */
+	case 0x81:   /* TODO: HOP */
+	case 0x82:   /* TODO: BPH */
+	case 0x83:   /* TODO: NBH */
+	case 0x84:   /* TODO: IND */
+		break;
+	case 0x85:   /* NEL -- Next line */
+		tnewline(1); /* always go to first col */
+		break;
+	case 0x86:   /* TODO: SSA */
+	case 0x87:   /* TODO: ESA */
+		break;
+	case 0x88:   /* HTS -- Horizontal tab stop */
+		term.tabs[term.c.x] = 1;
+		break;
+	case 0x89:   /* TODO: HTJ */
+	case 0x8a:   /* TODO: VTS */
+	case 0x8b:   /* TODO: PLD */
+	case 0x8c:   /* TODO: PLU */
+	case 0x8d:   /* TODO: RI */
+	case 0x8e:   /* TODO: SS2 */
+	case 0x8f:   /* TODO: SS3 */
+	case 0x91:   /* TODO: PU1 */
+	case 0x92:   /* TODO: PU2 */
+	case 0x93:   /* TODO: STS */
+	case 0x94:   /* TODO: CCH */
+	case 0x95:   /* TODO: MW */
+	case 0x96:   /* TODO: SPA */
+	case 0x97:   /* TODO: EPA */
+	case 0x98:   /* TODO: SOS */
+	case 0x99:   /* TODO: SGCI */
+		break;
+	case 0x9a:   /* DECID -- Identify Terminal */
+		ttywrite(vtiden, strlen(vtiden), 0);
+		break;
+	case 0x9b:   /* TODO: CSI */
+	case 0x9c:   /* TODO: ST */
+		break;
+	case 0x90:   /* DCS -- Device Control String */
+	case 0x9d:   /* OSC -- Operating System Command */
+	case 0x9e:   /* PM -- Privacy Message */
+	case 0x9f:   /* APC -- Application Program Command */
+		tstrsequence(ascii);
+		return;
+	}
+	/* only CAN, SUB, \a and C1 chars interrupt a sequence */
+	term.esc &= ~(ESC_STR_END|ESC_STR);
+}
+
+/*
+ * returns 1 when the sequence is finished and it hasn't to read
+ * more characters for this sequence, otherwise 0
+ */
+int
+eschandle(uchar ascii)
+{
+	switch (ascii) {
+	case '[':
+		term.esc |= ESC_CSI;
+		return 0;
+	case '#':
+		term.esc |= ESC_TEST;
+		return 0;
+	case '%':
+		term.esc |= ESC_UTF8;
+		return 0;
+	case 'P': /* DCS -- Device Control String */
+	case '_': /* APC -- Application Program Command */
+	case '^': /* PM -- Privacy Message */
+	case ']': /* OSC -- Operating System Command */
+	case 'k': /* old title set compatibility */
+		tstrsequence(ascii);
+		return 0;
+	case 'n': /* LS2 -- Locking shift 2 */
+	case 'o': /* LS3 -- Locking shift 3 */
+		term.charset = 2 + (ascii - 'n');
+		break;
+	case '(': /* GZD4 -- set primary charset G0 */
+	case ')': /* G1D4 -- set secondary charset G1 */
+	case '*': /* G2D4 -- set tertiary charset G2 */
+	case '+': /* G3D4 -- set quaternary charset G3 */
+		term.icharset = ascii - '(';
+		term.esc |= ESC_ALTCHARSET;
+		return 0;
+	case 'D': /* IND -- Linefeed */
+		if (term.c.y == term.bot) {
+			tscrollup(term.top, 1, 1);
+		} else {
+			tmoveto(term.c.x, term.c.y+1);
+		}
+		break;
+	case 'E': /* NEL -- Next line */
+		tnewline(1); /* always go to first col */
+		break;
+	case 'H': /* HTS -- Horizontal tab stop */
+		term.tabs[term.c.x] = 1;
+		break;
+	case 'M': /* RI -- Reverse index */
+		if (term.c.y == term.top) {
+			tscrolldown(term.top, 1, 1);
+		} else {
+			tmoveto(term.c.x, term.c.y-1);
+		}
+		break;
+	case 'Z': /* DECID -- Identify Terminal */
+		ttywrite(vtiden, strlen(vtiden), 0);
+		break;
+	case 'c': /* RIS -- Reset to initial state */
+		treset();
+		resettitle();
+		xloadcols();
+		break;
+	case '=': /* DECPAM -- Application keypad */
+		xsetmode(1, MODE_APPKEYPAD);
+		break;
+	case '>': /* DECPNM -- Normal keypad */
+		xsetmode(0, MODE_APPKEYPAD);
+		break;
+	case '7': /* DECSC -- Save Cursor */
+		tcursor(CURSOR_SAVE);
+		break;
+	case '8': /* DECRC -- Restore Cursor */
+		tcursor(CURSOR_LOAD);
+		break;
+	case '\\': /* ST -- String Terminator */
+		if (term.esc & ESC_STR_END)
+			strhandle();
+		break;
+	default:
+		fprintf(stderr, "erresc: unknown sequence ESC 0x%02X '%c'\n",
+			(uchar) ascii, isprint(ascii)? ascii:'.');
+		break;
+	}
+	return 1;
+}
+
+void
+tputc(Rune u)
+{
+	char c[UTF_SIZ];
+	int control;
+	int width, len;
+	Glyph *gp;
+
+	control = ISCONTROL(u);
+	if (u < 127 || !IS_SET(MODE_UTF8 | MODE_SIXEL)) {
+		c[0] = u;
+		width = len = 1;
+	} else {
+		len = utf8encode(u, c);
+		if (!control && (width = wcwidth(u)) == -1)
+			width = 1;
+	}
+
+	if (IS_SET(MODE_PRINT))
+		tprinter(c, len);
+
+	/*
+	 * STR sequence must be checked before anything else
+	 * because it uses all following characters until it
+	 * receives a ESC, a SUB, a ST or any other C1 control
+	 * character.
+	 */
+	if (term.esc & ESC_STR) {
+		if (u == '\a' || u == 030 || u == 032 || u == 033 ||
+		   ISCONTROLC1(u)) {
+			term.esc &= ~(ESC_START|ESC_STR|ESC_DCS);
+			if (IS_SET(MODE_SIXEL)) {
+				/* TODO: render sixel */;
+				term.mode &= ~MODE_SIXEL;
+				return;
+			}
+			term.esc |= ESC_STR_END;
+			goto check_control_code;
+		}
+
+		if (IS_SET(MODE_SIXEL)) {
+			/* TODO: implement sixel mode */
+			return;
+		}
+		if (term.esc&ESC_DCS && strescseq.len == 0 && u == 'q')
+			term.mode |= MODE_SIXEL;
+
+		if (strescseq.len+len >= strescseq.siz) {
+			/*
+			 * Here is a bug in terminals. If the user never sends
+			 * some code to stop the str or esc command, then st
+			 * will stop responding. But this is better than
+			 * silently failing with unknown characters. At least
+			 * then users will report back.
+			 *
+			 * In the case users ever get fixed, here is the code:
+			 */
+			/*
+			 * term.esc = 0;
+			 * strhandle();
+			 */
+			if (strescseq.siz > (SIZE_MAX - UTF_SIZ) / 2)
+				return;
+			strescseq.siz *= 2;
+			strescseq.buf = xrealloc(strescseq.buf, strescseq.siz);
+		}
+
+		memmove(&strescseq.buf[strescseq.len], c, len);
+		strescseq.len += len;
+		return;
+	}
+
+check_control_code:
+	/*
+	 * Actions of control codes must be performed as soon they arrive
+	 * because they can be embedded inside a control sequence, and
+	 * they must not cause conflicts with sequences.
+	 */
+	if (control) {
+		tcontrolcode(u);
+		/*
+		 * control codes are not shown ever
+		 */
+		if (!term.esc)
+			term.lastc = 0;
+		return;
+	} else if (term.esc & ESC_START) {
+		if (term.esc & ESC_CSI) {
+			csiescseq.buf[csiescseq.len++] = u;
+			if (BETWEEN(u, 0x40, 0x7E)
+					|| csiescseq.len >= \
+					sizeof(csiescseq.buf)-1) {
+				term.esc = 0;
+				csiparse();
+				csihandle();
+			}
+			return;
+		} else if (term.esc & ESC_UTF8) {
+			tdefutf8(u);
+		} else if (term.esc & ESC_ALTCHARSET) {
+			tdeftran(u);
+		} else if (term.esc & ESC_TEST) {
+			tdectest(u);
+		} else {
+			if (!eschandle(u))
+				return;
+			/* sequence already finished */
+		}
+		term.esc = 0;
+		/*
+		 * All characters which form part of a sequence are not
+		 * printed
+		 */
+		return;
+	}
+	if (selected(term.c.x, term.c.y))
+		selclear();
+
+	gp = &term.line[term.c.y][term.c.x];
+	if (IS_SET(MODE_WRAP) && (term.c.state & CURSOR_WRAPNEXT)) {
+		gp->mode |= ATTR_WRAP;
+		tnewline(1);
+		gp = &term.line[term.c.y][term.c.x];
+	}
+
+	if (IS_SET(MODE_INSERT) && term.c.x+width < term.col)
+		memmove(gp+width, gp, (term.col - term.c.x - width) * sizeof(Glyph));
+
+	if (term.c.x+width > term.col) {
+		tnewline(1);
+		gp = &term.line[term.c.y][term.c.x];
+	}
+
+	tsetchar(u, &term.c.attr, term.c.x, term.c.y);
+	term.lastc = u;
+
+	if (width == 2) {
+		gp->mode |= ATTR_WIDE;
+		if (term.c.x+1 < term.col) {
+			gp[1].u = '\0';
+			gp[1].mode = ATTR_WDUMMY;
+		}
+	}
+	if (term.c.x+width < term.col) {
+		tmoveto(term.c.x+width, term.c.y);
+	} else {
+		term.c.state |= CURSOR_WRAPNEXT;
+	}
+}
+
+int
+twrite(const char *buf, int buflen, int show_ctrl)
+{
+	int charsize;
+	Rune u;
+	int n;
+
+	for (n = 0; n < buflen; n += charsize) {
+		if (IS_SET(MODE_UTF8) && !IS_SET(MODE_SIXEL)) {
+			/* process a complete utf8 char */
+			charsize = utf8decode(buf + n, &u, buflen - n);
+			if (charsize == 0)
+				break;
+		} else {
+			u = buf[n] & 0xFF;
+			charsize = 1;
+		}
+		if (show_ctrl && ISCONTROL(u)) {
+			if (u & 0x80) {
+				u &= 0x7f;
+				tputc('^');
+				tputc('[');
+			} else if (u != '\n' && u != '\r' && u != '\t') {
+				u ^= 0x40;
+				tputc('^');
+			}
+		}
+		tputc(u);
+	}
+	return n;
+}
+
+void
+tresize(int col, int row)
+{
+	int i, j;
+	int minrow = MIN(row, term.row);
+	int mincol = MIN(col, term.col);
+	int *bp;
+	TCursor c;
+
+	if (col < 1 || row < 1) {
+		fprintf(stderr,
+		        "tresize: error resizing to %dx%d\n", col, row);
+		return;
+	}
+
+	/*
+	 * slide screen to keep cursor where we expect it -
+	 * tscrollup would work here, but we can optimize to
+	 * memmove because we're freeing the earlier lines
+	 */
+	for (i = 0; i <= term.c.y - row; i++) {
+		free(term.line[i]);
+		free(term.alt[i]);
+	}
+	/* ensure that both src and dst are not NULL */
+	if (i > 0) {
+		memmove(term.line, term.line + i, row * sizeof(Line));
+		memmove(term.alt, term.alt + i, row * sizeof(Line));
+	}
+	for (i += row; i < term.row; i++) {
+		free(term.line[i]);
+		free(term.alt[i]);
+	}
+
+	/* resize to new height */
+	term.line = xrealloc(term.line, row * sizeof(Line));
+	term.alt  = xrealloc(term.alt,  row * sizeof(Line));
+	term.dirty = xrealloc(term.dirty, row * sizeof(*term.dirty));
+	term.tabs = xrealloc(term.tabs, col * sizeof(*term.tabs));
+
+	for (i = 0; i < HISTSIZE; i++) {
+		term.hist[i] = xrealloc(term.hist[i], col * sizeof(Glyph));
+		for (j = mincol; j < col; j++) {
+			term.hist[i][j] = term.c.attr;
+			term.hist[i][j].u = ' ';
+		}
+	}
+
+	/* resize each row to new width, zero-pad if needed */
+	for (i = 0; i < minrow; i++) {
+		term.line[i] = xrealloc(term.line[i], col * sizeof(Glyph));
+		term.alt[i]  = xrealloc(term.alt[i],  col * sizeof(Glyph));
+	}
+
+	/* allocate any new rows */
+	for (/* i = minrow */; i < row; i++) {
+		term.line[i] = xmalloc(col * sizeof(Glyph));
+		term.alt[i] = xmalloc(col * sizeof(Glyph));
+	}
+	if (col > term.col) {
+		bp = term.tabs + term.col;
+
+		memset(bp, 0, sizeof(*term.tabs) * (col - term.col));
+		while (--bp > term.tabs && !*bp)
+			/* nothing */ ;
+		for (bp += tabspaces; bp < term.tabs + col; bp += tabspaces)
+			*bp = 1;
+	}
+	/* update terminal size */
+	term.col = col;
+	term.row = row;
+	/* reset scrolling region */
+	tsetscroll(0, row-1);
+	/* make use of the LIMIT in tmoveto */
+	tmoveto(term.c.x, term.c.y);
+	/* Clearing both screens (it makes dirty all lines) */
+	c = term.c;
+	for (i = 0; i < 2; i++) {
+		if (mincol < col && 0 < minrow) {
+			tclearregion(mincol, 0, col - 1, minrow - 1);
+		}
+		if (0 < col && minrow < row) {
+			tclearregion(0, minrow, col - 1, row - 1);
+		}
+		tswapscreen();
+		tcursor(CURSOR_LOAD);
+	}
+	term.c = c;
+}
+
+void
+resettitle(void)
+{
+	xsettitle(NULL);
+}
+
+void
+drawregion(int x1, int y1, int x2, int y2)
+{
+	int y;
+
+	for (y = y1; y < y2; y++) {
+		if (!term.dirty[y])
+			continue;
+
+		term.dirty[y] = 0;
+		xdrawline(TLINE(y), x1, y, x2);
+	}
+}
+
+void
+draw(void)
+{
+	int cx = term.c.x, ocx = term.ocx, ocy = term.ocy;
+
+	if (!xstartdraw())
+		return;
+
+	/* adjust cursor position */
+	LIMIT(term.ocx, 0, term.col-1);
+	LIMIT(term.ocy, 0, term.row-1);
+	if (term.line[term.ocy][term.ocx].mode & ATTR_WDUMMY)
+		term.ocx--;
+	if (term.line[term.c.y][cx].mode & ATTR_WDUMMY)
+		cx--;
+
+	drawregion(0, 0, term.col, term.row);
+	if (term.scr == 0)
+		xdrawcursor(cx, term.c.y, term.line[term.c.y][cx],
+				term.ocx, term.ocy, term.line[term.ocy][term.ocx]);
+	term.ocx = cx;
+	term.ocy = term.c.y;
+	xfinishdraw();
+	if (ocx != term.ocx || ocy != term.ocy)
+		xximspot(term.ocx, term.ocy);
+}
+
+void
+redraw(void)
+{
+	tfulldirt();
+	draw();
+}
diff --git a/st.h b/st.h
index 3d351b6..00c796c 100644
--- a/st.h
+++ b/st.h
@@ -11,7 +11,8 @@
 #define DIVCEIL(n, d)		(((n) + ((d) - 1)) / (d))
 #define DEFAULT(a, b)		(a) = (a) ? (a) : (b)
 #define LIMIT(x, a, b)		(x) = (x) < (a) ? (a) : (x) > (b) ? (b) : (x)
-#define ATTRCMP(a, b)		((a).mode != (b).mode || (a).fg != (b).fg || \
+#define ATTRCMP(a, b)		(((a).mode & (~ATTR_WRAP) & (~ATTR_LIGA)) != ((b).mode & (~ATTR_WRAP) & (~ATTR_LIGA)) || \
+				(a).fg != (b).fg || \
 				(a).bg != (b).bg)
 #define TIMEDIFF(t1, t2)	((t1.tv_sec-t2.tv_sec)*1000 + \
 				(t1.tv_nsec-t2.tv_nsec)/1E6)
@@ -33,6 +34,7 @@ enum glyph_attribute {
 	ATTR_WRAP       = 1 << 8,
 	ATTR_WIDE       = 1 << 9,
 	ATTR_WDUMMY     = 1 << 10,
+	ATTR_LIGA       = 1 << 11,
 	ATTR_BOLD_FAINT = ATTR_BOLD | ATTR_FAINT,
 };
 
@@ -81,6 +83,8 @@ void die(const char *, ...);
 void redraw(void);
 void draw(void);
 
+void kscrolldown(const Arg *);
+void kscrollup(const Arg *);
 void printscreen(const Arg *);
 void printsel(const Arg *);
 void sendbreak(const Arg *);
diff --git a/st.o b/st.o
new file mode 100644
index 0000000000000000000000000000000000000000..15ae487dc3bcdcf36c4c7f83e0590d1cf2b2faf2
GIT binary patch
literal 76968
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
Ziwm2_@4FXMrSDxFVh$8?x$%eT{{<I=VyOTC

literal 0
HcmV?d00001

diff --git a/win.h b/win.h
index a6ef1b9..bc0d180 100644
--- a/win.h
+++ b/win.h
@@ -25,7 +25,7 @@ enum win_mode {
 
 void xbell(void);
 void xclipcopy(void);
-void xdrawcursor(int, int, Glyph, int, int, Glyph);
+void xdrawcursor(int, int, Glyph, int, int, Glyph, Line, int);
 void xdrawline(Line, int, int, int);
 void xfinishdraw(void);
 void xloadcols(void);
diff --git a/x.c b/x.c
index 210f184..f6d67ef 100644
--- a/x.c
+++ b/x.c
@@ -19,6 +19,7 @@ char *argv0;
 #include "arg.h"
 #include "st.h"
 #include "win.h"
+#include "hb.h"
 
 /* types used in config.h */
 typedef struct {
@@ -1031,6 +1032,9 @@ xunloadfont(Font *f)
 void
 xunloadfonts(void)
 {
+	/* Clear Harfbuzz font cache. */
+	hbunloadfonts();
+
 	/* Free the loaded fonts in the font cache.  */
 	while (frclen > 0)
 		XftFontClose(xw.dpy, frc[--frclen].font);
@@ -1229,7 +1233,7 @@ xmakeglyphfontspecs(XftGlyphFontSpec *specs, const Glyph *glyphs, int len, int x
 		mode = glyphs[i].mode;
 
 		/* Skip dummy wide-character spacing. */
-		if (mode == ATTR_WDUMMY)
+		if (mode & ATTR_WDUMMY)
 			continue;
 
 		/* Determine font for glyph if different from previous glyph. */
@@ -1336,6 +1340,9 @@ xmakeglyphfontspecs(XftGlyphFontSpec *specs, const Glyph *glyphs, int len, int x
 		numspecs++;
 	}
 
+	/* Harfbuzz transformation for ligatures. */
+	hbtransform(specs, glyphs, len, x, y);
+
 	return numspecs;
 }
 
@@ -1485,14 +1492,17 @@ xdrawglyph(Glyph g, int x, int y)
 }
 
 void
-xdrawcursor(int cx, int cy, Glyph g, int ox, int oy, Glyph og)
+xdrawcursor(int cx, int cy, Glyph g, int ox, int oy, Glyph og, Line line, int len)
 {
 	Color drawcol;
 
 	/* remove the old cursor */
 	if (selected(ox, oy))
 		og.mode ^= ATTR_REVERSE;
-	xdrawglyph(og, ox, oy);
+
+	/* Redraw the line where cursor was previously.
+	 * It will restore the ligatures broken by the cursor. */
+	xdrawline(line, 0, oy, len);
 
 	if (IS_SET(MODE_HIDE))
 		return;
diff --git a/x.o b/x.o
new file mode 100644
index 0000000000000000000000000000000000000000..cee9f816e1ccefc948347ab0ab4d5a66049001a8
GIT binary patch
literal 74016
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

literal 0
HcmV?d00001

-- 
2.27.0

